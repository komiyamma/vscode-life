declare namespace System {
    namespace Collections {
        namespace Generic {
            /**
            名前:Dictionary`2
            名前空間:System.Collections.Generic
            完全限定名:System.Collections.Generic.Dictionary`2
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
            */
            interface Dictionary<TKey, TValue> {
                new();
                new(capacity: number);
                new(comparer: System.Collections.Generic.IEqualityComparer<TKey>);
                new(capacity: number, comparer: System.Collections.Generic.IEqualityComparer<TKey>);
                new(dictionary: System.Collections.Generic.IDictionary<TKey, TValue>, comparer: System.Collections.Generic.IEqualityComparer<TKey>);
                new(dictionary: System.Collections.Generic.IDictionary<TKey, TValue>);
                Count :number;
                [key: TKey]: TValue;
                Add(key: TKey, value: TValue): void;
                Clear(): void;
                ContainsKey(key: TKey): boolean;
                GetEnumerator(): any;
                Remove(key: TKey): boolean;
                TryGetValue(key: TKey, value: TValue): boolean;
                ContainsValue(value: TValue): boolean;
                GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
                OnDeserialization(sender: any): void;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        namespace Generic {
            /**
            名前:IEqualityComparer`1
            名前空間:System.Collections.Generic
            完全限定名:System.Collections.Generic.IEqualityComparer`1
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IEqualityComparer<T> {
                Equals(x: T, y: T): boolean;
                GetHashCode(obj: T): number;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        namespace Generic {
            /**
            名前:IDictionary`2
            名前空間:System.Collections.Generic
            完全限定名:System.Collections.Generic.IDictionary`2
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IDictionary<TKey, TValue> {
                [key: TKey]: TValue;
                ContainsKey(key: TKey): boolean;
                Add(key: TKey, value: TValue): void;
                Remove(key: TKey): boolean;
                TryGetValue(key: TKey, value: TValue): boolean;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Serialization {
            /**
            名前:SerializationInfo
            名前空間:System.Runtime.Serialization
            完全限定名:System.Runtime.Serialization.SerializationInfo
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface SerializationInfo {
                new(type: System.Type, converter: System.Runtime.Serialization.IFormatterConverter);
                new(type: System.Type, converter: System.Runtime.Serialization.IFormatterConverter, requireSameTokenInPartialTrust: boolean);
                FullTypeName :string;
                AssemblyName :string;
                MemberCount :number;
                ObjectType :System.Type;
                IsFullTypeNameSetExplicit :boolean;
                IsAssemblyNameSetExplicit :boolean;
                SetType(type: System.Type): void;
                GetEnumerator(): System.Runtime.Serialization.SerializationInfoEnumerator;
                AddValue(name: string, value: any, type: System.Type): void;
                AddValue(name: string, value: any): void;
                AddValue(name: string, value: boolean): void;
                AddValue(name: string, value: System.Char): void;
                AddValue(name: string, value: System.SByte): void;
                AddValue(name: string, value: System.Byte): void;
                AddValue(name: string, value: System.Int16): void;
                AddValue(name: string, value: System.UInt16): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: number): void;
                AddValue(name: string, value: System.DateTime): void;
                GetValue(name: string, type: System.Type): any;
                GetBoolean(name: string): boolean;
                GetChar(name: string): System.Char;
                GetSByte(name: string): System.SByte;
                GetByte(name: string): System.Byte;
                GetInt16(name: string): System.Int16;
                GetUInt16(name: string): System.UInt16;
                GetInt32(name: string): number;
                GetUInt32(name: string): number;
                GetInt64(name: string): number;
                GetUInt64(name: string): number;
                GetSingle(name: string): number;
                GetDouble(name: string): number;
                GetDecimal(name: string): number;
                GetDateTime(name: string): System.DateTime;
                GetString(name: string): string;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Serialization {
            /**
            名前:StreamingContext
            名前空間:System.Runtime.Serialization
            完全限定名:System.Runtime.Serialization.StreamingContext
            このメンバを宣言するクラス:
            親クラス:System.ValueType
            属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
            */
            interface StreamingContext {
                new(state: System.Runtime.Serialization.StreamingContextStates);
                new(state: System.Runtime.Serialization.StreamingContextStates, additional: any);
                Context :any;
                State :System.Runtime.Serialization.StreamingContextStates;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:Type
    名前空間:System
    完全限定名:System.Type
    このメンバを宣言するクラス:
    親クラス:System.Reflection.MemberInfo
    属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
    */
    interface Type {
        FilterAttribute :System.Reflection.MemberFilter;
        FilterName :System.Reflection.MemberFilter;
        FilterNameIgnoreCase :System.Reflection.MemberFilter;
        Missing :any;
        Delimiter :System.Char;
        EmptyTypes :System.Type[];
        MemberType :System.Reflection.MemberTypes;
        DeclaringType :System.Type;
        DeclaringMethod :System.Reflection.MethodBase;
        ReflectedType :System.Type;
        StructLayoutAttribute :System.Runtime.InteropServices.StructLayoutAttribute;
        GUID :System.Guid;
        DefaultBinder :System.Reflection.Binder;
        Module :System.Reflection.Module;
        Assembly :System.Reflection.Assembly;
        TypeHandle :System.RuntimeTypeHandle;
        FullName :string;
        Namespace :string;
        AssemblyQualifiedName :string;
        BaseType :System.Type;
        TypeInitializer :System.Reflection.ConstructorInfo;
        IsNested :boolean;
        Attributes :System.Reflection.TypeAttributes;
        GenericParameterAttributes :System.Reflection.GenericParameterAttributes;
        IsVisible :boolean;
        IsNotPublic :boolean;
        IsPublic :boolean;
        IsNestedPublic :boolean;
        IsNestedPrivate :boolean;
        IsNestedFamily :boolean;
        IsNestedAssembly :boolean;
        IsNestedFamANDAssem :boolean;
        IsNestedFamORAssem :boolean;
        IsAutoLayout :boolean;
        IsLayoutSequential :boolean;
        IsExplicitLayout :boolean;
        IsClass :boolean;
        IsInterface :boolean;
        IsValueType :boolean;
        IsAbstract :boolean;
        IsSealed :boolean;
        IsEnum :boolean;
        IsSpecialName :boolean;
        IsImport :boolean;
        IsSerializable :boolean;
        IsAnsiClass :boolean;
        IsUnicodeClass :boolean;
        IsAutoClass :boolean;
        IsArray :boolean;
        IsGenericType :boolean;
        IsGenericTypeDefinition :boolean;
        IsConstructedGenericType :boolean;
        IsGenericParameter :boolean;
        GenericParameterPosition :number;
        ContainsGenericParameters :boolean;
        IsByRef :boolean;
        IsPointer :boolean;
        IsPrimitive :boolean;
        IsCOMObject :boolean;
        HasElementType :boolean;
        IsContextful :boolean;
        IsMarshalByRef :boolean;
        GenericTypeArguments :System.Type[];
        IsSecurityCritical :boolean;
        IsSecuritySafeCritical :boolean;
        IsSecurityTransparent :boolean;
        UnderlyingSystemType :System.Type;
        Name :string;
        CustomAttributes :any;
        MetadataToken :number;
        GetType(typeName: string, throwOnError: boolean, ignoreCase: boolean): System.Type;
        GetType(typeName: string, throwOnError: boolean): System.Type;
        GetType(typeName: string): System.Type;
        GetType<D>(typeName: string, assemblyResolver: any, typeResolver: any): System.Type;
        GetType<D>(typeName: string, assemblyResolver: any, typeResolver: any, throwOnError: boolean): System.Type;
        GetType<D>(typeName: string, assemblyResolver: any, typeResolver: any, throwOnError: boolean, ignoreCase: boolean): System.Type;
        ReflectionOnlyGetType(typeName: string, throwIfNotFound: boolean, ignoreCase: boolean): System.Type;
        MakePointerType(): System.Type;
        MakeByRefType(): System.Type;
        MakeArrayType(): System.Type;
        MakeArrayType(rank: number): System.Type;
        GetTypeFromProgID(progID: string): System.Type;
        GetTypeFromProgID(progID: string, throwOnError: boolean): System.Type;
        GetTypeFromProgID(progID: string, server: string): System.Type;
        GetTypeFromProgID(progID: string, server: string, throwOnError: boolean): System.Type;
        GetTypeFromCLSID(clsid: System.Guid): System.Type;
        GetTypeFromCLSID(clsid: System.Guid, throwOnError: boolean): System.Type;
        GetTypeFromCLSID(clsid: System.Guid, server: string): System.Type;
        GetTypeFromCLSID(clsid: System.Guid, server: string, throwOnError: boolean): System.Type;
        GetTypeCode(type: System.Type): System.TypeCode;
        InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any[], modifiers: System.Reflection.ParameterModifier[], culture: System.Globalization.CultureInfo, namedParameters: string[]): any;
        InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any[], culture: System.Globalization.CultureInfo): any;
        InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any[]): any;
        GetTypeHandle(o: any): System.RuntimeTypeHandle;
        GetTypeFromHandle(handle: System.RuntimeTypeHandle): System.Type;
        GetArrayRank(): number;
        GetConstructor(bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, callConvention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.ConstructorInfo;
        GetConstructor(bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.ConstructorInfo;
        GetConstructor(types: System.Type[]): System.Reflection.ConstructorInfo;
        GetConstructors(): System.Reflection.ConstructorInfo[];
        GetConstructors(bindingAttr: System.Reflection.BindingFlags): System.Reflection.ConstructorInfo[];
        GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, callConvention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
        GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
        GetMethod(name: string, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
        GetMethod(name: string, types: System.Type[]): System.Reflection.MethodInfo;
        GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo;
        GetMethod(name: string): System.Reflection.MethodInfo;
        GetMethods(): System.Reflection.MethodInfo[];
        GetMethods(bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo[];
        GetField(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo;
        GetField(name: string): System.Reflection.FieldInfo;
        GetFields(): System.Reflection.FieldInfo[];
        GetFields(bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo[];
        GetInterface(name: string): System.Type;
        GetInterface(name: string, ignoreCase: boolean): System.Type;
        GetInterfaces(): System.Type[];
        FindInterfaces(filter: System.Reflection.TypeFilter, filterCriteria: any): System.Type[];
        GetEvent(name: string): System.Reflection.EventInfo;
        GetEvent(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.EventInfo;
        GetEvents(): System.Reflection.EventInfo[];
        GetEvents(bindingAttr: System.Reflection.BindingFlags): System.Reflection.EventInfo[];
        GetProperty(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, returnType: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
        GetProperty(name: string, returnType: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
        GetProperty(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo;
        GetProperty(name: string, returnType: System.Type, types: System.Type[]): System.Reflection.PropertyInfo;
        GetProperty(name: string, types: System.Type[]): System.Reflection.PropertyInfo;
        GetProperty(name: string, returnType: System.Type): System.Reflection.PropertyInfo;
        GetProperty(name: string): System.Reflection.PropertyInfo;
        GetProperties(bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo[];
        GetProperties(): System.Reflection.PropertyInfo[];
        GetNestedTypes(): System.Type[];
        GetNestedTypes(bindingAttr: System.Reflection.BindingFlags): System.Type[];
        GetNestedType(name: string): System.Type;
        GetNestedType(name: string, bindingAttr: System.Reflection.BindingFlags): System.Type;
        GetMember(name: string): System.Reflection.MemberInfo[];
        GetMember(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
        GetMember(name: string, type: System.Reflection.MemberTypes, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
        GetMembers(): System.Reflection.MemberInfo[];
        GetMembers(bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
        GetDefaultMembers(): System.Reflection.MemberInfo[];
        FindMembers(memberType: System.Reflection.MemberTypes, bindingAttr: System.Reflection.BindingFlags, filter: System.Reflection.MemberFilter, filterCriteria: any): System.Reflection.MemberInfo[];
        GetGenericParameterConstraints(): System.Type[];
        MakeGenericType(typeArguments: System.Type[]): System.Type;
        GetElementType(): System.Type;
        GetGenericArguments(): System.Type[];
        GetGenericTypeDefinition(): System.Type;
        GetEnumNames(): string[];
        GetEnumValues(): System.Array;
        GetEnumUnderlyingType(): System.Type;
        IsEnumDefined(value: any): boolean;
        GetEnumName(value: any): string;
        IsSubclassOf(c: System.Type): boolean;
        IsInstanceOfType(o: any): boolean;
        IsAssignableFrom(c: System.Type): boolean;
        IsEquivalentTo(other: System.Type): boolean;
        ToString(): string;
        GetTypeArray(args: any[]): System.Type[];
        Equals(o: any): boolean;
        Equals(o: System.Type): boolean;
        GetHashCode(): number;
        GetInterfaceMap(interfaceType: System.Type): System.Reflection.InterfaceMapping;
        GetType(): System.Type;
        GetCustomAttributes(inherit: boolean): any[];
        GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
        IsDefined(attributeType: System.Type, inherit: boolean): boolean;
        GetCustomAttributesData(): any;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Runtime {
        namespace Serialization {
            /**
            名前:IFormatterConverter
            名前空間:System.Runtime.Serialization
            完全限定名:System.Runtime.Serialization.IFormatterConverter
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IFormatterConverter {
                Convert(value: any, type: System.Type): any;
                Convert(value: any, typeCode: System.TypeCode): any;
                ToBoolean(value: any): boolean;
                ToChar(value: any): System.Char;
                ToSByte(value: any): System.SByte;
                ToByte(value: any): System.Byte;
                ToInt16(value: any): System.Int16;
                ToUInt16(value: any): System.UInt16;
                ToInt32(value: any): number;
                ToUInt32(value: any): number;
                ToInt64(value: any): number;
                ToUInt64(value: any): number;
                ToSingle(value: any): number;
                ToDouble(value: any): number;
                ToDecimal(value: any): number;
                ToDateTime(value: any): System.DateTime;
                ToString(value: any): string;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Serialization {
            /**
            名前:SerializationInfoEnumerator
            名前空間:System.Runtime.Serialization
            完全限定名:System.Runtime.Serialization.SerializationInfoEnumerator
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface SerializationInfoEnumerator {
                Current :System.Runtime.Serialization.SerializationEntry;
                Name :string;
                Value :any;
                ObjectType :System.Type;
                MoveNext(): boolean;
                Reset(): void;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:Char
    名前空間:System
    完全限定名:System.Char
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface Char {
        MaxValue :System.Char;
        MinValue :System.Char;
        GetHashCode(): number;
        Equals(obj: any): boolean;
        Equals(obj: System.Char): boolean;
        CompareTo(value: any): number;
        CompareTo(value: System.Char): number;
        ToString(): string;
        ToString(provider: System.IFormatProvider): string;
        ToString(c: System.Char): string;
        Parse(s: string): System.Char;
        TryParse(s: string, result: System.Char): boolean;
        IsDigit(c: System.Char): boolean;
        IsLetter(c: System.Char): boolean;
        IsWhiteSpace(c: System.Char): boolean;
        IsUpper(c: System.Char): boolean;
        IsLower(c: System.Char): boolean;
        IsPunctuation(c: System.Char): boolean;
        IsLetterOrDigit(c: System.Char): boolean;
        ToUpper(c: System.Char, culture: System.Globalization.CultureInfo): System.Char;
        ToUpper(c: System.Char): System.Char;
        ToUpperInvariant(c: System.Char): System.Char;
        ToLower(c: System.Char, culture: System.Globalization.CultureInfo): System.Char;
        ToLower(c: System.Char): System.Char;
        ToLowerInvariant(c: System.Char): System.Char;
        GetTypeCode(): System.TypeCode;
        IsControl(c: System.Char): boolean;
        IsControl(s: string, index: number): boolean;
        IsDigit(s: string, index: number): boolean;
        IsLetter(s: string, index: number): boolean;
        IsLetterOrDigit(s: string, index: number): boolean;
        IsLower(s: string, index: number): boolean;
        IsNumber(c: System.Char): boolean;
        IsNumber(s: string, index: number): boolean;
        IsPunctuation(s: string, index: number): boolean;
        IsSeparator(c: System.Char): boolean;
        IsSeparator(s: string, index: number): boolean;
        IsSurrogate(c: System.Char): boolean;
        IsSurrogate(s: string, index: number): boolean;
        IsSymbol(c: System.Char): boolean;
        IsSymbol(s: string, index: number): boolean;
        IsUpper(s: string, index: number): boolean;
        IsWhiteSpace(s: string, index: number): boolean;
        GetUnicodeCategory(c: System.Char): System.Globalization.UnicodeCategory;
        GetUnicodeCategory(s: string, index: number): System.Globalization.UnicodeCategory;
        GetNumericValue(c: System.Char): number;
        GetNumericValue(s: string, index: number): number;
        IsHighSurrogate(c: System.Char): boolean;
        IsHighSurrogate(s: string, index: number): boolean;
        IsLowSurrogate(c: System.Char): boolean;
        IsLowSurrogate(s: string, index: number): boolean;
        IsSurrogatePair(s: string, index: number): boolean;
        IsSurrogatePair(highSurrogate: System.Char, lowSurrogate: System.Char): boolean;
        ConvertFromUtf32(utf32: number): string;
        ConvertToUtf32(highSurrogate: System.Char, lowSurrogate: System.Char): number;
        ConvertToUtf32(s: string, index: number): number;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:SByte
    名前空間:System
    完全限定名:System.SByte
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface SByte {
        MaxValue :System.SByte;
        MinValue :System.SByte;
        ToString(): string;
        CompareTo(obj: any): number;
        CompareTo(value: System.SByte): number;
        Equals(obj: any): boolean;
        Equals(obj: System.SByte): boolean;
        GetHashCode(): number;
        ToString(provider: System.IFormatProvider): string;
        ToString(format: string): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        Parse(s: string): System.SByte;
        Parse(s: string, style: System.Globalization.NumberStyles): System.SByte;
        Parse(s: string, provider: System.IFormatProvider): System.SByte;
        Parse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider): System.SByte;
        TryParse(s: string, result: System.SByte): boolean;
        TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: System.SByte): boolean;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:Byte
    名前空間:System
    完全限定名:System.Byte
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface Byte {
        MaxValue :System.Byte;
        MinValue :System.Byte;
        CompareTo(value: any): number;
        CompareTo(value: System.Byte): number;
        Equals(obj: any): boolean;
        Equals(obj: System.Byte): boolean;
        GetHashCode(): number;
        Parse(s: string): System.Byte;
        Parse(s: string, style: System.Globalization.NumberStyles): System.Byte;
        Parse(s: string, provider: System.IFormatProvider): System.Byte;
        Parse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider): System.Byte;
        TryParse(s: string, result: System.Byte): boolean;
        TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: System.Byte): boolean;
        ToString(): string;
        ToString(format: string): string;
        ToString(provider: System.IFormatProvider): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:Int16
    名前空間:System
    完全限定名:System.Int16
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface Int16 {
        MaxValue :System.Int16;
        MinValue :System.Int16;
        CompareTo(value: any): number;
        CompareTo(value: System.Int16): number;
        Equals(obj: any): boolean;
        Equals(obj: System.Int16): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(provider: System.IFormatProvider): string;
        ToString(format: string): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        Parse(s: string): System.Int16;
        Parse(s: string, style: System.Globalization.NumberStyles): System.Int16;
        Parse(s: string, provider: System.IFormatProvider): System.Int16;
        Parse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider): System.Int16;
        TryParse(s: string, result: System.Int16): boolean;
        TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: System.Int16): boolean;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:UInt16
    名前空間:System
    完全限定名:System.UInt16
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface UInt16 {
        MaxValue :System.UInt16;
        MinValue :System.UInt16;
        CompareTo(value: any): number;
        CompareTo(value: System.UInt16): number;
        Equals(obj: any): boolean;
        Equals(obj: System.UInt16): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(provider: System.IFormatProvider): string;
        ToString(format: string): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        Parse(s: string): System.UInt16;
        Parse(s: string, style: System.Globalization.NumberStyles): System.UInt16;
        Parse(s: string, provider: System.IFormatProvider): System.UInt16;
        Parse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider): System.UInt16;
        TryParse(s: string, result: System.UInt16): boolean;
        TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: System.UInt16): boolean;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:DateTime
    名前空間:System
    完全限定名:System.DateTime
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
    */
    interface DateTime {
        new(ticks: number);
        new(ticks: number, kind: System.DateTimeKind);
        new(year: number, month: number, day: number);
        new(year: number, month: number, day: number, calendar: System.Globalization.Calendar);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number, kind: System.DateTimeKind);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number, calendar: System.Globalization.Calendar);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, kind: System.DateTimeKind);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, calendar: System.Globalization.Calendar);
        new(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, calendar: System.Globalization.Calendar, kind: System.DateTimeKind);
        MinValue :System.DateTime;
        MaxValue :System.DateTime;
        Date :System.DateTime;
        Day :number;
        DayOfWeek :System.DayOfWeek;
        DayOfYear :number;
        Hour :number;
        Kind :System.DateTimeKind;
        Millisecond :number;
        Minute :number;
        Month :number;
        Now :System.DateTime;
        UtcNow :System.DateTime;
        Second :number;
        Ticks :number;
        TimeOfDay :System.TimeSpan;
        Today :System.DateTime;
        Year :number;
        Add(value: System.TimeSpan): System.DateTime;
        AddDays(value: number): System.DateTime;
        AddHours(value: number): System.DateTime;
        AddMilliseconds(value: number): System.DateTime;
        AddMinutes(value: number): System.DateTime;
        AddMonths(months: number): System.DateTime;
        AddSeconds(value: number): System.DateTime;
        AddTicks(value: number): System.DateTime;
        AddYears(value: number): System.DateTime;
        Compare(t1: System.DateTime, t2: System.DateTime): number;
        CompareTo(value: any): number;
        CompareTo(value: System.DateTime): number;
        DaysInMonth(year: number, month: number): number;
        Equals(value: any): boolean;
        Equals(value: System.DateTime): boolean;
        Equals(t1: System.DateTime, t2: System.DateTime): boolean;
        FromBinary(dateData: number): System.DateTime;
        FromFileTime(fileTime: number): System.DateTime;
        FromFileTimeUtc(fileTime: number): System.DateTime;
        FromOADate(d: number): System.DateTime;
        IsDaylightSavingTime(): boolean;
        SpecifyKind(value: System.DateTime, kind: System.DateTimeKind): System.DateTime;
        ToBinary(): number;
        GetHashCode(): number;
        IsLeapYear(year: number): boolean;
        Parse(s: string): System.DateTime;
        Parse(s: string, provider: System.IFormatProvider): System.DateTime;
        Parse(s: string, provider: System.IFormatProvider, styles: System.Globalization.DateTimeStyles): System.DateTime;
        ParseExact(s: string, format: string, provider: System.IFormatProvider): System.DateTime;
        ParseExact(s: string, format: string, provider: System.IFormatProvider, style: System.Globalization.DateTimeStyles): System.DateTime;
        ParseExact(s: string, formats: string[], provider: System.IFormatProvider, style: System.Globalization.DateTimeStyles): System.DateTime;
        Subtract(value: System.DateTime): System.TimeSpan;
        Subtract(value: System.TimeSpan): System.DateTime;
        ToOADate(): number;
        ToFileTime(): number;
        ToFileTimeUtc(): number;
        ToLocalTime(): System.DateTime;
        ToLongDateString(): string;
        ToLongTimeString(): string;
        ToShortDateString(): string;
        ToShortTimeString(): string;
        ToString(): string;
        ToString(format: string): string;
        ToString(provider: System.IFormatProvider): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        ToUniversalTime(): System.DateTime;
        TryParse(s: string, result: System.DateTime): boolean;
        TryParse(s: string, provider: System.IFormatProvider, styles: System.Globalization.DateTimeStyles, result: System.DateTime): boolean;
        TryParseExact(s: string, format: string, provider: System.IFormatProvider, style: System.Globalization.DateTimeStyles, result: System.DateTime): boolean;
        TryParseExact(s: string, formats: string[], provider: System.IFormatProvider, style: System.Globalization.DateTimeStyles, result: System.DateTime): boolean;
        GetDateTimeFormats(): string[];
        GetDateTimeFormats(provider: System.IFormatProvider): string[];
        GetDateTimeFormats(format: System.Char): string[];
        GetDateTimeFormats(format: System.Char, provider: System.IFormatProvider): string[];
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Runtime {
        namespace Serialization {
            /**
            名前:StreamingContextStates
            名前空間:System.Runtime.Serialization
            完全限定名:System.Runtime.Serialization.StreamingContextStates
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface StreamingContextStates {
                value__ :number;
                CrossProcess :System.Runtime.Serialization.StreamingContextStates;
                CrossMachine :System.Runtime.Serialization.StreamingContextStates;
                File :System.Runtime.Serialization.StreamingContextStates;
                Persistence :System.Runtime.Serialization.StreamingContextStates;
                Remoting :System.Runtime.Serialization.StreamingContextStates;
                Other :System.Runtime.Serialization.StreamingContextStates;
                Clone :System.Runtime.Serialization.StreamingContextStates;
                CrossAppDomain :System.Runtime.Serialization.StreamingContextStates;
                All :System.Runtime.Serialization.StreamingContextStates;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MemberFilter
        名前空間:System.Reflection
        完全限定名:System.Reflection.MemberFilter
        このメンバを宣言するクラス:
        親クラス:System.MulticastDelegate
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface MemberFilter {
            new(object: any, method: System.IntPtr);
            Method :System.Reflection.MethodInfo;
            Target :any;
            Invoke(m: System.Reflection.MemberInfo, filterCriteria: any): boolean;
            BeginInvoke(m: System.Reflection.MemberInfo, filterCriteria: any, callback: System.AsyncCallback, object: any): System.IAsyncResult;
            EndInvoke(result: System.IAsyncResult): boolean;
            GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
            Equals(obj: any): boolean;
            GetInvocationList(): System.Delegate[];
            GetHashCode(): number;
            DynamicInvoke(args: any[]): any;
            Clone(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MemberTypes
        名前空間:System.Reflection
        完全限定名:System.Reflection.MemberTypes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface MemberTypes {
            value__ :number;
            Constructor :System.Reflection.MemberTypes;
            Event :System.Reflection.MemberTypes;
            Field :System.Reflection.MemberTypes;
            Method :System.Reflection.MemberTypes;
            Property :System.Reflection.MemberTypes;
            TypeInfo :System.Reflection.MemberTypes;
            Custom :System.Reflection.MemberTypes;
            NestedType :System.Reflection.MemberTypes;
            All :System.Reflection.MemberTypes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MethodBase
        名前空間:System.Reflection
        完全限定名:System.Reflection.MethodBase
        このメンバを宣言するクラス:
        親クラス:System.Reflection.MemberInfo
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface MethodBase {
            MethodImplementationFlags :System.Reflection.MethodImplAttributes;
            MethodHandle :System.RuntimeMethodHandle;
            Attributes :System.Reflection.MethodAttributes;
            CallingConvention :System.Reflection.CallingConventions;
            IsGenericMethodDefinition :boolean;
            ContainsGenericParameters :boolean;
            IsGenericMethod :boolean;
            IsSecurityCritical :boolean;
            IsSecuritySafeCritical :boolean;
            IsSecurityTransparent :boolean;
            IsPublic :boolean;
            IsPrivate :boolean;
            IsFamily :boolean;
            IsAssembly :boolean;
            IsFamilyAndAssembly :boolean;
            IsFamilyOrAssembly :boolean;
            IsStatic :boolean;
            IsFinal :boolean;
            IsVirtual :boolean;
            IsHideBySig :boolean;
            IsAbstract :boolean;
            IsSpecialName :boolean;
            IsConstructor :boolean;
            MemberType :System.Reflection.MemberTypes;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            GetMethodFromHandle(handle: System.RuntimeMethodHandle): System.Reflection.MethodBase;
            GetMethodFromHandle(handle: System.RuntimeMethodHandle, declaringType: System.RuntimeTypeHandle): System.Reflection.MethodBase;
            GetCurrentMethod(): System.Reflection.MethodBase;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetParameters(): System.Reflection.ParameterInfo[];
            GetMethodImplementationFlags(): System.Reflection.MethodImplAttributes;
            Invoke(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any[], culture: System.Globalization.CultureInfo): any;
            GetGenericArguments(): System.Type[];
            Invoke(obj: any, parameters: any[]): any;
            GetMethodBody(): System.Reflection.MethodBody;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace InteropServices {
            /**
            名前:StructLayoutAttribute
            名前空間:System.Runtime.InteropServices
            完全限定名:System.Runtime.InteropServices.StructLayoutAttribute
            このメンバを宣言するクラス:
            親クラス:System.Attribute
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface StructLayoutAttribute {
                new(layoutKind: System.Runtime.InteropServices.LayoutKind);
                new(layoutKind: System.Int16);
                Pack :number;
                Size :number;
                CharSet :System.Runtime.InteropServices.CharSet;
                Value :System.Runtime.InteropServices.LayoutKind;
                TypeId :any;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                Match(obj: any): boolean;
                IsDefaultAttribute(): boolean;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:Guid
    名前空間:System
    完全限定名:System.Guid
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface Guid {
        new(b: System.Byte[]);
        new(a: number, b: System.UInt16, c: System.UInt16, d: System.Byte, e: System.Byte, f: System.Byte, g: System.Byte, h: System.Byte, i: System.Byte, j: System.Byte, k: System.Byte);
        new(a: number, b: System.Int16, c: System.Int16, d: System.Byte[]);
        new(a: number, b: System.Int16, c: System.Int16, d: System.Byte, e: System.Byte, f: System.Byte, g: System.Byte, h: System.Byte, i: System.Byte, j: System.Byte, k: System.Byte);
        new(g: string);
        Empty :System.Guid;
        Parse(input: string): System.Guid;
        TryParse(input: string, result: System.Guid): boolean;
        ParseExact(input: string, format: string): System.Guid;
        TryParseExact(input: string, format: string, result: System.Guid): boolean;
        ToByteArray(): System.Byte[];
        ToString(): string;
        GetHashCode(): number;
        Equals(o: any): boolean;
        Equals(g: System.Guid): boolean;
        CompareTo(value: any): number;
        CompareTo(value: System.Guid): number;
        NewGuid(): System.Guid;
        ToString(format: string): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:Binder
        名前空間:System.Reflection
        完全限定名:System.Reflection.Binder
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
        */
        interface Binder {
            BindToMethod(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.MethodBase[], args: any[], modifiers: System.Reflection.ParameterModifier[], culture: System.Globalization.CultureInfo, names: string[], state: any): System.Reflection.MethodBase;
            BindToField(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.FieldInfo[], value: any, culture: System.Globalization.CultureInfo): System.Reflection.FieldInfo;
            SelectMethod(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.MethodBase[], types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodBase;
            SelectProperty(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.PropertyInfo[], returnType: System.Type, indexes: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
            ChangeType(value: any, type: System.Type, culture: System.Globalization.CultureInfo): any;
            ReorderArgumentArray(args: any[], state: any): void;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:Module
        名前空間:System.Reflection
        完全限定名:System.Reflection.Module
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity
        */
        interface Module {
            FilterTypeName :System.Reflection.TypeFilter;
            FilterTypeNameIgnoreCase :System.Reflection.TypeFilter;
            CustomAttributes :any;
            MDStreamVersion :number;
            FullyQualifiedName :string;
            ModuleVersionId :System.Guid;
            MetadataToken :number;
            ScopeName :string;
            Name :string;
            Assembly :System.Reflection.Assembly;
            ModuleHandle :System.ModuleHandle;
            Equals(o: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ResolveMethod(metadataToken: number): System.Reflection.MethodBase;
            ResolveMethod(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Reflection.MethodBase;
            ResolveField(metadataToken: number): System.Reflection.FieldInfo;
            ResolveField(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Reflection.FieldInfo;
            ResolveType(metadataToken: number): System.Type;
            ResolveType(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Type;
            ResolveMember(metadataToken: number): System.Reflection.MemberInfo;
            ResolveMember(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Reflection.MemberInfo;
            ResolveSignature(metadataToken: number): System.Byte[];
            ResolveString(metadataToken: number): string;
            GetPEKind(peKind: System.Reflection.PortableExecutableKinds, machine: System.Reflection.ImageFileMachine): void;
            GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
            GetType(className: string, ignoreCase: boolean): System.Type;
            GetType(className: string): System.Type;
            GetType(className: string, throwOnError: boolean, ignoreCase: boolean): System.Type;
            FindTypes(filter: System.Reflection.TypeFilter, filterCriteria: any): System.Type[];
            GetTypes(): System.Type[];
            IsResource(): boolean;
            GetFields(): System.Reflection.FieldInfo[];
            GetFields(bindingFlags: System.Reflection.BindingFlags): System.Reflection.FieldInfo[];
            GetField(name: string): System.Reflection.FieldInfo;
            GetField(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo;
            GetMethods(): System.Reflection.MethodInfo[];
            GetMethods(bindingFlags: System.Reflection.BindingFlags): System.Reflection.MethodInfo[];
            GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, callConvention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
            GetMethod(name: string, types: System.Type[]): System.Reflection.MethodInfo;
            GetMethod(name: string): System.Reflection.MethodInfo;
            GetSignerCertificate(): System.Security.Cryptography.X509Certificates.X509Certificate;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:Assembly
        名前空間:System.Reflection
        完全限定名:System.Reflection.Assembly
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface Assembly {
            CodeBase :string;
            EscapedCodeBase :string;
            FullName :string;
            EntryPoint :System.Reflection.MethodInfo;
            ExportedTypes :any;
            DefinedTypes :any;
            Evidence :System.Security.Policy.Evidence;
            PermissionSet :System.Security.PermissionSet;
            IsFullyTrusted :boolean;
            SecurityRuleSet :System.Security.SecurityRuleSet;
            ManifestModule :System.Reflection.Module;
            CustomAttributes :any;
            ReflectionOnly :boolean;
            Modules :any;
            Location :string;
            ImageRuntimeVersion :string;
            GlobalAssemblyCache :boolean;
            HostContext :number;
            IsDynamic :boolean;
            CreateQualifiedName(assemblyName: string, typeName: string): string;
            GetAssembly(type: System.Type): System.Reflection.Assembly;
            Equals(o: any): boolean;
            GetHashCode(): number;
            LoadFrom(assemblyFile: string): System.Reflection.Assembly;
            ReflectionOnlyLoadFrom(assemblyFile: string): System.Reflection.Assembly;
            LoadFrom(assemblyFile: string, securityEvidence: System.Security.Policy.Evidence): System.Reflection.Assembly;
            LoadFrom(assemblyFile: string, securityEvidence: System.Security.Policy.Evidence, hashValue: System.Byte[], hashAlgorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm): System.Reflection.Assembly;
            LoadFrom(assemblyFile: string, hashValue: System.Byte[], hashAlgorithm: System.Configuration.Assemblies.AssemblyHashAlgorithm): System.Reflection.Assembly;
            UnsafeLoadFrom(assemblyFile: string): System.Reflection.Assembly;
            Load(assemblyString: string): System.Reflection.Assembly;
            ReflectionOnlyLoad(assemblyString: string): System.Reflection.Assembly;
            Load(assemblyString: string, assemblySecurity: System.Security.Policy.Evidence): System.Reflection.Assembly;
            Load(assemblyRef: System.Reflection.AssemblyName): System.Reflection.Assembly;
            Load(assemblyRef: System.Reflection.AssemblyName, assemblySecurity: System.Security.Policy.Evidence): System.Reflection.Assembly;
            LoadWithPartialName(partialName: string): System.Reflection.Assembly;
            LoadWithPartialName(partialName: string, securityEvidence: System.Security.Policy.Evidence): System.Reflection.Assembly;
            Load(rawAssembly: System.Byte[]): System.Reflection.Assembly;
            ReflectionOnlyLoad(rawAssembly: System.Byte[]): System.Reflection.Assembly;
            Load(rawAssembly: System.Byte[], rawSymbolStore: System.Byte[]): System.Reflection.Assembly;
            Load(rawAssembly: System.Byte[], rawSymbolStore: System.Byte[], securityContextSource: System.Security.SecurityContextSource): System.Reflection.Assembly;
            Load(rawAssembly: System.Byte[], rawSymbolStore: System.Byte[], securityEvidence: System.Security.Policy.Evidence): System.Reflection.Assembly;
            LoadFile(path: string): System.Reflection.Assembly;
            LoadFile(path: string, securityEvidence: System.Security.Policy.Evidence): System.Reflection.Assembly;
            GetExecutingAssembly(): System.Reflection.Assembly;
            GetCallingAssembly(): System.Reflection.Assembly;
            GetEntryAssembly(): System.Reflection.Assembly;
            GetName(): System.Reflection.AssemblyName;
            GetName(copiedName: boolean): System.Reflection.AssemblyName;
            GetType(name: string): System.Type;
            GetType(name: string, throwOnError: boolean): System.Type;
            GetType(name: string, throwOnError: boolean, ignoreCase: boolean): System.Type;
            GetExportedTypes(): System.Type[];
            GetTypes(): System.Type[];
            GetManifestResourceStream(type: System.Type, name: string): System.IO.Stream;
            GetManifestResourceStream(name: string): System.IO.Stream;
            GetSatelliteAssembly(culture: System.Globalization.CultureInfo): System.Reflection.Assembly;
            GetSatelliteAssembly(culture: System.Globalization.CultureInfo, version: System.Version): System.Reflection.Assembly;
            GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            LoadModule(moduleName: string, rawModule: System.Byte[]): System.Reflection.Module;
            LoadModule(moduleName: string, rawModule: System.Byte[], rawSymbolStore: System.Byte[]): System.Reflection.Module;
            CreateInstance(typeName: string): any;
            CreateInstance(typeName: string, ignoreCase: boolean): any;
            CreateInstance(typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any[], culture: System.Globalization.CultureInfo, activationAttributes: any[]): any;
            GetLoadedModules(): System.Reflection.Module[];
            GetLoadedModules(getResourceModules: boolean): System.Reflection.Module[];
            GetModules(): System.Reflection.Module[];
            GetModules(getResourceModules: boolean): System.Reflection.Module[];
            GetModule(name: string): System.Reflection.Module;
            GetFile(name: string): System.IO.FileStream;
            GetFiles(): System.IO.FileStream[];
            GetFiles(getResourceModules: boolean): System.IO.FileStream[];
            GetManifestResourceNames(): string[];
            GetReferencedAssemblies(): System.Reflection.AssemblyName[];
            GetManifestResourceInfo(resourceName: string): System.Reflection.ManifestResourceInfo;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:RuntimeTypeHandle
    名前空間:System
    完全限定名:System.RuntimeTypeHandle
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface RuntimeTypeHandle {
        Value :System.IntPtr;
        GetHashCode(): number;
        Equals(handle: System.RuntimeTypeHandle): boolean;
        Equals(obj: any): boolean;
        GetModuleHandle(): System.ModuleHandle;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ConstructorInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.ConstructorInfo
        このメンバを宣言するクラス:
        親クラス:System.Reflection.MethodBase
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface ConstructorInfo {
            ConstructorName :string;
            TypeConstructorName :string;
            MemberType :System.Reflection.MemberTypes;
            MethodImplementationFlags :System.Reflection.MethodImplAttributes;
            MethodHandle :System.RuntimeMethodHandle;
            Attributes :System.Reflection.MethodAttributes;
            CallingConvention :System.Reflection.CallingConventions;
            IsGenericMethodDefinition :boolean;
            ContainsGenericParameters :boolean;
            IsGenericMethod :boolean;
            IsSecurityCritical :boolean;
            IsSecuritySafeCritical :boolean;
            IsSecurityTransparent :boolean;
            IsPublic :boolean;
            IsPrivate :boolean;
            IsFamily :boolean;
            IsAssembly :boolean;
            IsFamilyAndAssembly :boolean;
            IsFamilyOrAssembly :boolean;
            IsStatic :boolean;
            IsFinal :boolean;
            IsVirtual :boolean;
            IsHideBySig :boolean;
            IsAbstract :boolean;
            IsSpecialName :boolean;
            IsConstructor :boolean;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            Invoke(parameters: any[]): any;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            Invoke(invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any[], culture: System.Globalization.CultureInfo): any;
            GetParameters(): System.Reflection.ParameterInfo[];
            GetMethodImplementationFlags(): System.Reflection.MethodImplAttributes;
            Invoke(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any[], culture: System.Globalization.CultureInfo): any;
            GetGenericArguments(): System.Type[];
            Invoke(obj: any, parameters: any[]): any;
            GetMethodBody(): System.Reflection.MethodBody;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:TypeAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.TypeAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface TypeAttributes {
            value__ :number;
            VisibilityMask :System.Reflection.TypeAttributes;
            NotPublic :System.Reflection.TypeAttributes;
            Public :System.Reflection.TypeAttributes;
            NestedPublic :System.Reflection.TypeAttributes;
            NestedPrivate :System.Reflection.TypeAttributes;
            NestedFamily :System.Reflection.TypeAttributes;
            NestedAssembly :System.Reflection.TypeAttributes;
            NestedFamANDAssem :System.Reflection.TypeAttributes;
            NestedFamORAssem :System.Reflection.TypeAttributes;
            LayoutMask :System.Reflection.TypeAttributes;
            AutoLayout :System.Reflection.TypeAttributes;
            SequentialLayout :System.Reflection.TypeAttributes;
            ExplicitLayout :System.Reflection.TypeAttributes;
            ClassSemanticsMask :System.Reflection.TypeAttributes;
            Class :System.Reflection.TypeAttributes;
            Interface :System.Reflection.TypeAttributes;
            Abstract :System.Reflection.TypeAttributes;
            Sealed :System.Reflection.TypeAttributes;
            SpecialName :System.Reflection.TypeAttributes;
            Import :System.Reflection.TypeAttributes;
            Serializable :System.Reflection.TypeAttributes;
            WindowsRuntime :System.Reflection.TypeAttributes;
            StringFormatMask :System.Reflection.TypeAttributes;
            AnsiClass :System.Reflection.TypeAttributes;
            UnicodeClass :System.Reflection.TypeAttributes;
            AutoClass :System.Reflection.TypeAttributes;
            CustomFormatClass :System.Reflection.TypeAttributes;
            CustomFormatMask :System.Reflection.TypeAttributes;
            BeforeFieldInit :System.Reflection.TypeAttributes;
            ReservedMask :System.Reflection.TypeAttributes;
            RTSpecialName :System.Reflection.TypeAttributes;
            HasSecurity :System.Reflection.TypeAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:GenericParameterAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.GenericParameterAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed
        */
        interface GenericParameterAttributes {
            value__ :number;
            None :System.Reflection.GenericParameterAttributes;
            VarianceMask :System.Reflection.GenericParameterAttributes;
            Covariant :System.Reflection.GenericParameterAttributes;
            Contravariant :System.Reflection.GenericParameterAttributes;
            SpecialConstraintMask :System.Reflection.GenericParameterAttributes;
            ReferenceTypeConstraint :System.Reflection.GenericParameterAttributes;
            NotNullableValueTypeConstraint :System.Reflection.GenericParameterAttributes;
            DefaultConstructorConstraint :System.Reflection.GenericParameterAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:TypeCode
    名前空間:System
    完全限定名:System.TypeCode
    このメンバを宣言するクラス:
    親クラス:System.Enum
    属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
    */
    interface TypeCode {
        value__ :number;
        Empty :System.TypeCode;
        Object :System.TypeCode;
        DBNull :System.TypeCode;
        Boolean :System.TypeCode;
        Char :System.TypeCode;
        SByte :System.TypeCode;
        Byte :System.TypeCode;
        Int16 :System.TypeCode;
        UInt16 :System.TypeCode;
        Int32 :System.TypeCode;
        UInt32 :System.TypeCode;
        Int64 :System.TypeCode;
        UInt64 :System.TypeCode;
        Single :System.TypeCode;
        Double :System.TypeCode;
        Decimal :System.TypeCode;
        DateTime :System.TypeCode;
        String :System.TypeCode;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        CompareTo(target: any): number;
        ToString(format: string): string;
        ToString(provider: System.IFormatProvider): string;
        HasFlag(flag: System.Enum): boolean;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:BindingFlags
        名前空間:System.Reflection
        完全限定名:System.Reflection.BindingFlags
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface BindingFlags {
            value__ :number;
            Default :System.Reflection.BindingFlags;
            IgnoreCase :System.Reflection.BindingFlags;
            DeclaredOnly :System.Reflection.BindingFlags;
            Instance :System.Reflection.BindingFlags;
            Static :System.Reflection.BindingFlags;
            Public :System.Reflection.BindingFlags;
            NonPublic :System.Reflection.BindingFlags;
            FlattenHierarchy :System.Reflection.BindingFlags;
            InvokeMethod :System.Reflection.BindingFlags;
            CreateInstance :System.Reflection.BindingFlags;
            GetField :System.Reflection.BindingFlags;
            SetField :System.Reflection.BindingFlags;
            GetProperty :System.Reflection.BindingFlags;
            SetProperty :System.Reflection.BindingFlags;
            PutDispProperty :System.Reflection.BindingFlags;
            PutRefDispProperty :System.Reflection.BindingFlags;
            ExactBinding :System.Reflection.BindingFlags;
            SuppressChangeType :System.Reflection.BindingFlags;
            OptionalParamBinding :System.Reflection.BindingFlags;
            IgnoreReturn :System.Reflection.BindingFlags;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ParameterModifier
        名前空間:System.Reflection
        完全限定名:System.Reflection.ParameterModifier
        このメンバを宣言するクラス:
        親クラス:System.ValueType
        属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
        */
        interface ParameterModifier {
            new(parameterCount: number);
            Item :boolean;
            [index: number]: System.Boolean;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:CultureInfo
        名前空間:System.Globalization
        完全限定名:System.Globalization.CultureInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface CultureInfo {
            new(name: string);
            new(name: string, useUserOverride: boolean);
            new(culture: number);
            new(culture: number, useUserOverride: boolean);
            CurrentCulture :System.Globalization.CultureInfo;
            CurrentUICulture :System.Globalization.CultureInfo;
            InstalledUICulture :System.Globalization.CultureInfo;
            DefaultThreadCurrentCulture :System.Globalization.CultureInfo;
            DefaultThreadCurrentUICulture :System.Globalization.CultureInfo;
            InvariantCulture :System.Globalization.CultureInfo;
            Parent :System.Globalization.CultureInfo;
            LCID :number;
            KeyboardLayoutId :number;
            Name :string;
            IetfLanguageTag :string;
            DisplayName :string;
            NativeName :string;
            EnglishName :string;
            TwoLetterISOLanguageName :string;
            ThreeLetterISOLanguageName :string;
            ThreeLetterWindowsLanguageName :string;
            CompareInfo :System.Globalization.CompareInfo;
            TextInfo :System.Globalization.TextInfo;
            IsNeutralCulture :boolean;
            CultureTypes :System.Globalization.CultureTypes;
            NumberFormat :System.Globalization.NumberFormatInfo;
            DateTimeFormat :System.Globalization.DateTimeFormatInfo;
            Calendar :System.Globalization.Calendar;
            OptionalCalendars :System.Globalization.Calendar[];
            UseUserOverride :boolean;
            IsReadOnly :boolean;
            CreateSpecificCulture(name: string): System.Globalization.CultureInfo;
            GetCultures(types: System.Globalization.CultureTypes): System.Globalization.CultureInfo[];
            Equals(value: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetFormat(formatType: System.Type): any;
            ClearCachedData(): void;
            GetConsoleFallbackUICulture(): System.Globalization.CultureInfo;
            Clone(): any;
            ReadOnly(ci: System.Globalization.CultureInfo): System.Globalization.CultureInfo;
            GetCultureInfo(culture: number): System.Globalization.CultureInfo;
            GetCultureInfo(name: string): System.Globalization.CultureInfo;
            GetCultureInfo(name: string, altName: string): System.Globalization.CultureInfo;
            GetCultureInfoByIetfLanguageTag(name: string): System.Globalization.CultureInfo;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:CallingConventions
        名前空間:System.Reflection
        完全限定名:System.Reflection.CallingConventions
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface CallingConventions {
            value__ :number;
            Standard :System.Reflection.CallingConventions;
            VarArgs :System.Reflection.CallingConventions;
            Any :System.Reflection.CallingConventions;
            HasThis :System.Reflection.CallingConventions;
            ExplicitThis :System.Reflection.CallingConventions;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MethodInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.MethodInfo
        このメンバを宣言するクラス:
        親クラス:System.Reflection.MethodBase
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface MethodInfo {
            MemberType :System.Reflection.MemberTypes;
            ReturnType :System.Type;
            ReturnParameter :System.Reflection.ParameterInfo;
            ReturnTypeCustomAttributes :System.Reflection.ICustomAttributeProvider;
            MethodImplementationFlags :System.Reflection.MethodImplAttributes;
            MethodHandle :System.RuntimeMethodHandle;
            Attributes :System.Reflection.MethodAttributes;
            CallingConvention :System.Reflection.CallingConventions;
            IsGenericMethodDefinition :boolean;
            ContainsGenericParameters :boolean;
            IsGenericMethod :boolean;
            IsSecurityCritical :boolean;
            IsSecuritySafeCritical :boolean;
            IsSecurityTransparent :boolean;
            IsPublic :boolean;
            IsPrivate :boolean;
            IsFamily :boolean;
            IsAssembly :boolean;
            IsFamilyAndAssembly :boolean;
            IsFamilyOrAssembly :boolean;
            IsStatic :boolean;
            IsFinal :boolean;
            IsVirtual :boolean;
            IsHideBySig :boolean;
            IsAbstract :boolean;
            IsSpecialName :boolean;
            IsConstructor :boolean;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetBaseDefinition(): System.Reflection.MethodInfo;
            GetGenericArguments(): System.Type[];
            GetGenericMethodDefinition(): System.Reflection.MethodInfo;
            MakeGenericMethod(typeArguments: System.Type[]): System.Reflection.MethodInfo;
            CreateDelegate(delegateType: System.Type): System.Delegate;
            CreateDelegate(delegateType: System.Type, target: any): System.Delegate;
            GetParameters(): System.Reflection.ParameterInfo[];
            GetMethodImplementationFlags(): System.Reflection.MethodImplAttributes;
            Invoke(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any[], culture: System.Globalization.CultureInfo): any;
            Invoke(obj: any, parameters: any[]): any;
            GetMethodBody(): System.Reflection.MethodBody;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:FieldInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.FieldInfo
        このメンバを宣言するクラス:
        親クラス:System.Reflection.MemberInfo
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface FieldInfo {
            MemberType :System.Reflection.MemberTypes;
            FieldHandle :System.RuntimeFieldHandle;
            FieldType :System.Type;
            Attributes :System.Reflection.FieldAttributes;
            IsPublic :boolean;
            IsPrivate :boolean;
            IsFamily :boolean;
            IsAssembly :boolean;
            IsFamilyAndAssembly :boolean;
            IsFamilyOrAssembly :boolean;
            IsStatic :boolean;
            IsInitOnly :boolean;
            IsLiteral :boolean;
            IsNotSerialized :boolean;
            IsSpecialName :boolean;
            IsPinvokeImpl :boolean;
            IsSecurityCritical :boolean;
            IsSecuritySafeCritical :boolean;
            IsSecurityTransparent :boolean;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            GetFieldFromHandle(handle: System.RuntimeFieldHandle): System.Reflection.FieldInfo;
            GetFieldFromHandle(handle: System.RuntimeFieldHandle, declaringType: System.RuntimeTypeHandle): System.Reflection.FieldInfo;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetRequiredCustomModifiers(): System.Type[];
            GetOptionalCustomModifiers(): System.Type[];
            SetValueDirect(obj: System.TypedReference, value: any): void;
            GetValueDirect(obj: System.TypedReference): any;
            GetValue(obj: any): any;
            GetRawConstantValue(): any;
            SetValue(obj: any, value: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, culture: System.Globalization.CultureInfo): void;
            SetValue(obj: any, value: any): void;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:TypeFilter
        名前空間:System.Reflection
        完全限定名:System.Reflection.TypeFilter
        このメンバを宣言するクラス:
        親クラス:System.MulticastDelegate
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface TypeFilter {
            new(object: any, method: System.IntPtr);
            Method :System.Reflection.MethodInfo;
            Target :any;
            Invoke(m: System.Type, filterCriteria: any): boolean;
            BeginInvoke(m: System.Type, filterCriteria: any, callback: System.AsyncCallback, object: any): System.IAsyncResult;
            EndInvoke(result: System.IAsyncResult): boolean;
            GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
            Equals(obj: any): boolean;
            GetInvocationList(): System.Delegate[];
            GetHashCode(): number;
            DynamicInvoke(args: any[]): any;
            Clone(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:EventInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.EventInfo
        このメンバを宣言するクラス:
        親クラス:System.Reflection.MemberInfo
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface EventInfo {
            MemberType :System.Reflection.MemberTypes;
            Attributes :System.Reflection.EventAttributes;
            AddMethod :System.Reflection.MethodInfo;
            RemoveMethod :System.Reflection.MethodInfo;
            RaiseMethod :System.Reflection.MethodInfo;
            EventHandlerType :System.Type;
            IsSpecialName :boolean;
            IsMulticast :boolean;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetOtherMethods(nonPublic: boolean): System.Reflection.MethodInfo[];
            GetAddMethod(nonPublic: boolean): System.Reflection.MethodInfo;
            GetRemoveMethod(nonPublic: boolean): System.Reflection.MethodInfo;
            GetRaiseMethod(nonPublic: boolean): System.Reflection.MethodInfo;
            GetOtherMethods(): System.Reflection.MethodInfo[];
            GetAddMethod(): System.Reflection.MethodInfo;
            GetRemoveMethod(): System.Reflection.MethodInfo;
            GetRaiseMethod(): System.Reflection.MethodInfo;
            AddEventHandler(target: any, handler: System.Delegate): void;
            RemoveEventHandler(target: any, handler: System.Delegate): void;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:PropertyInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.PropertyInfo
        このメンバを宣言するクラス:
        親クラス:System.Reflection.MemberInfo
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface PropertyInfo {
            MemberType :System.Reflection.MemberTypes;
            PropertyType :System.Type;
            Attributes :System.Reflection.PropertyAttributes;
            CanRead :boolean;
            CanWrite :boolean;
            GetMethod :System.Reflection.MethodInfo;
            SetMethod :System.Reflection.MethodInfo;
            IsSpecialName :boolean;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetConstantValue(): any;
            GetRawConstantValue(): any;
            SetValue(obj: any, value: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, index: any[], culture: System.Globalization.CultureInfo): void;
            GetAccessors(nonPublic: boolean): System.Reflection.MethodInfo[];
            GetGetMethod(nonPublic: boolean): System.Reflection.MethodInfo;
            GetSetMethod(nonPublic: boolean): System.Reflection.MethodInfo;
            GetIndexParameters(): System.Reflection.ParameterInfo[];
            GetValue(obj: any): any;
            GetValue(obj: any, index: any[]): any;
            GetValue(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, index: any[], culture: System.Globalization.CultureInfo): any;
            SetValue(obj: any, value: any): void;
            SetValue(obj: any, value: any, index: any[]): void;
            GetRequiredCustomModifiers(): System.Type[];
            GetOptionalCustomModifiers(): System.Type[];
            GetAccessors(): System.Reflection.MethodInfo[];
            GetGetMethod(): System.Reflection.MethodInfo;
            GetSetMethod(): System.Reflection.MethodInfo;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MemberInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.MemberInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
        */
        interface MemberInfo {
            MemberType :System.Reflection.MemberTypes;
            Name :string;
            DeclaringType :System.Type;
            ReflectedType :System.Type;
            CustomAttributes :any;
            MetadataToken :number;
            Module :System.Reflection.Module;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:Array
    名前空間:System
    完全限定名:System.Array
    このメンバを宣言するクラス:
    親クラス:System.Object
    属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
    */
    interface Array {
        Length :number;
        LongLength :number;
        Rank :number;
        SyncRoot :any;
        IsReadOnly :boolean;
        IsFixedSize :boolean;
        IsSynchronized :boolean;
        AsReadOnly<T>(array: T[]): any;
        Resize<T>(array: T[], newSize: number): void;
        CreateInstance(elementType: System.Type, length: number): System.Array;
        CreateInstance(elementType: System.Type, length1: number, length2: number): System.Array;
        CreateInstance(elementType: System.Type, length1: number, length2: number, length3: number): System.Array;
        CreateInstance(elementType: System.Type, lengths: number[]): System.Array;
        CreateInstance(elementType: System.Type, lengths: number[]): System.Array;
        CreateInstance(elementType: System.Type, lengths: number[], lowerBounds: number[]): System.Array;
        Copy(sourceArray: System.Array, destinationArray: System.Array, length: number): void;
        Copy(sourceArray: System.Array, sourceIndex: number, destinationArray: System.Array, destinationIndex: number, length: number): void;
        ConstrainedCopy(sourceArray: System.Array, sourceIndex: number, destinationArray: System.Array, destinationIndex: number, length: number): void;
        Copy(sourceArray: System.Array, destinationArray: System.Array, length: number): void;
        Copy(sourceArray: System.Array, sourceIndex: number, destinationArray: System.Array, destinationIndex: number, length: number): void;
        Clear(array: System.Array, index: number, length: number): void;
        GetValue(indices: number[]): any;
        GetValue(index: number): any;
        GetValue(index1: number, index2: number): any;
        GetValue(index1: number, index2: number, index3: number): any;
        GetValue(index: number): any;
        GetValue(index1: number, index2: number): any;
        GetValue(index1: number, index2: number, index3: number): any;
        GetValue(indices: number[]): any;
        SetValue(value: any, index: number): void;
        SetValue(value: any, index1: number, index2: number): void;
        SetValue(value: any, index1: number, index2: number, index3: number): void;
        SetValue(value: any, indices: number[]): void;
        SetValue(value: any, index: number): void;
        SetValue(value: any, index1: number, index2: number): void;
        SetValue(value: any, index1: number, index2: number, index3: number): void;
        SetValue(value: any, indices: number[]): void;
        GetLength(dimension: number): number;
        GetLongLength(dimension: number): number;
        GetUpperBound(dimension: number): number;
        GetLowerBound(dimension: number): number;
        Clone(): any;
        BinarySearch(array: System.Array, value: any): number;
        BinarySearch(array: System.Array, index: number, length: number, value: any): number;
        BinarySearch(array: System.Array, value: any, comparer: System.Collections.IComparer): number;
        BinarySearch(array: System.Array, index: number, length: number, value: any, comparer: System.Collections.IComparer): number;
        BinarySearch<T>(array: T[], value: T): number;
        BinarySearch<T>(array: T[], value: T, comparer: any): number;
        BinarySearch<T>(array: T[], index: number, length: number, value: T): number;
        BinarySearch<T>(array: T[], index: number, length: number, value: T, comparer: any): number;
        ConvertAll<TInput, TOutput>(array: TInput[], converter: any): TOutput[];
        CopyTo(array: System.Array, index: number): void;
        CopyTo(array: System.Array, index: number): void;
        Empty<T>(): T[];
        Exists<T>(array: T[], match: any): boolean;
        Find<T>(array: T[], match: any): T;
        FindAll<T>(array: T[], match: any): T[];
        FindIndex<T>(array: T[], match: any): number;
        FindIndex<T>(array: T[], startIndex: number, match: any): number;
        FindIndex<T>(array: T[], startIndex: number, count: number, match: any): number;
        FindLast<T>(array: T[], match: any): T;
        FindLastIndex<T>(array: T[], match: any): number;
        FindLastIndex<T>(array: T[], startIndex: number, match: any): number;
        FindLastIndex<T>(array: T[], startIndex: number, count: number, match: any): number;
        ForEach<T>(array: T[], action: any): void;
        GetEnumerator(): System.Collections.IEnumerator;
        IndexOf(array: System.Array, value: any): number;
        IndexOf(array: System.Array, value: any, startIndex: number): number;
        IndexOf(array: System.Array, value: any, startIndex: number, count: number): number;
        IndexOf<T>(array: T[], value: T): number;
        IndexOf<T>(array: T[], value: T, startIndex: number): number;
        IndexOf<T>(array: T[], value: T, startIndex: number, count: number): number;
        LastIndexOf(array: System.Array, value: any): number;
        LastIndexOf(array: System.Array, value: any, startIndex: number): number;
        LastIndexOf(array: System.Array, value: any, startIndex: number, count: number): number;
        LastIndexOf<T>(array: T[], value: T): number;
        LastIndexOf<T>(array: T[], value: T, startIndex: number): number;
        LastIndexOf<T>(array: T[], value: T, startIndex: number, count: number): number;
        Reverse(array: System.Array): void;
        Reverse(array: System.Array, index: number, length: number): void;
        Sort(array: System.Array): void;
        Sort(keys: System.Array, items: System.Array): void;
        Sort(array: System.Array, index: number, length: number): void;
        Sort(keys: System.Array, items: System.Array, index: number, length: number): void;
        Sort(array: System.Array, comparer: System.Collections.IComparer): void;
        Sort(keys: System.Array, items: System.Array, comparer: System.Collections.IComparer): void;
        Sort(array: System.Array, index: number, length: number, comparer: System.Collections.IComparer): void;
        Sort(keys: System.Array, items: System.Array, index: number, length: number, comparer: System.Collections.IComparer): void;
        Sort<T>(array: T[]): void;
        Sort<TKey, TValue>(keys: TKey[], items: TValue[]): void;
        Sort<T>(array: T[], index: number, length: number): void;
        Sort<TKey, TValue>(keys: TKey[], items: TValue[], index: number, length: number): void;
        Sort<T>(array: T[], comparer: any): void;
        Sort<TKey, TValue>(keys: TKey[], items: TValue[], comparer: any): void;
        Sort<T>(array: T[], index: number, length: number, comparer: any): void;
        Sort<TKey, TValue>(keys: TKey[], items: TValue[], index: number, length: number, comparer: any): void;
        Sort<T>(array: T[], comparison: any): void;
        TrueForAll<T>(array: T[], match: any): boolean;
        Initialize(): void;
        ToString(): string;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:InterfaceMapping
        名前空間:System.Reflection
        完全限定名:System.Reflection.InterfaceMapping
        このメンバを宣言するクラス:
        親クラス:System.ValueType
        属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
        */
        interface InterfaceMapping {
            TargetType :System.Type;
            InterfaceType :System.Type;
            TargetMethods :System.Reflection.MethodInfo[];
            InterfaceMethods :System.Reflection.MethodInfo[];
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Serialization {
            /**
            名前:SerializationEntry
            名前空間:System.Runtime.Serialization
            完全限定名:System.Runtime.Serialization.SerializationEntry
            このメンバを宣言するクラス:
            親クラス:System.ValueType
            属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
            */
            interface SerializationEntry {
                Value :any;
                Name :string;
                ObjectType :System.Type;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:IFormatProvider
    名前空間:System
    完全限定名:System.IFormatProvider
    このメンバを宣言するクラス:
    親クラス:
    属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
    */
    interface IFormatProvider {
        GetFormat(formatType: System.Type): any;
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:UnicodeCategory
        名前空間:System.Globalization
        完全限定名:System.Globalization.UnicodeCategory
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface UnicodeCategory {
            value__ :number;
            UppercaseLetter :System.Globalization.UnicodeCategory;
            LowercaseLetter :System.Globalization.UnicodeCategory;
            TitlecaseLetter :System.Globalization.UnicodeCategory;
            ModifierLetter :System.Globalization.UnicodeCategory;
            OtherLetter :System.Globalization.UnicodeCategory;
            NonSpacingMark :System.Globalization.UnicodeCategory;
            SpacingCombiningMark :System.Globalization.UnicodeCategory;
            EnclosingMark :System.Globalization.UnicodeCategory;
            DecimalDigitNumber :System.Globalization.UnicodeCategory;
            LetterNumber :System.Globalization.UnicodeCategory;
            OtherNumber :System.Globalization.UnicodeCategory;
            SpaceSeparator :System.Globalization.UnicodeCategory;
            LineSeparator :System.Globalization.UnicodeCategory;
            ParagraphSeparator :System.Globalization.UnicodeCategory;
            Control :System.Globalization.UnicodeCategory;
            Format :System.Globalization.UnicodeCategory;
            Surrogate :System.Globalization.UnicodeCategory;
            PrivateUse :System.Globalization.UnicodeCategory;
            ConnectorPunctuation :System.Globalization.UnicodeCategory;
            DashPunctuation :System.Globalization.UnicodeCategory;
            OpenPunctuation :System.Globalization.UnicodeCategory;
            ClosePunctuation :System.Globalization.UnicodeCategory;
            InitialQuotePunctuation :System.Globalization.UnicodeCategory;
            FinalQuotePunctuation :System.Globalization.UnicodeCategory;
            OtherPunctuation :System.Globalization.UnicodeCategory;
            MathSymbol :System.Globalization.UnicodeCategory;
            CurrencySymbol :System.Globalization.UnicodeCategory;
            ModifierSymbol :System.Globalization.UnicodeCategory;
            OtherSymbol :System.Globalization.UnicodeCategory;
            OtherNotAssigned :System.Globalization.UnicodeCategory;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:NumberStyles
        名前空間:System.Globalization
        完全限定名:System.Globalization.NumberStyles
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface NumberStyles {
            value__ :number;
            None :System.Globalization.NumberStyles;
            AllowLeadingWhite :System.Globalization.NumberStyles;
            AllowTrailingWhite :System.Globalization.NumberStyles;
            AllowLeadingSign :System.Globalization.NumberStyles;
            AllowTrailingSign :System.Globalization.NumberStyles;
            AllowParentheses :System.Globalization.NumberStyles;
            AllowDecimalPoint :System.Globalization.NumberStyles;
            AllowThousands :System.Globalization.NumberStyles;
            AllowExponent :System.Globalization.NumberStyles;
            AllowCurrencySymbol :System.Globalization.NumberStyles;
            AllowHexSpecifier :System.Globalization.NumberStyles;
            Integer :System.Globalization.NumberStyles;
            HexNumber :System.Globalization.NumberStyles;
            Number :System.Globalization.NumberStyles;
            Float :System.Globalization.NumberStyles;
            Currency :System.Globalization.NumberStyles;
            Any :System.Globalization.NumberStyles;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:DateTimeKind
    名前空間:System
    完全限定名:System.DateTimeKind
    このメンバを宣言するクラス:
    親クラス:System.Enum
    属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
    */
    interface DateTimeKind {
        value__ :number;
        Unspecified :System.DateTimeKind;
        Utc :System.DateTimeKind;
        Local :System.DateTimeKind;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        CompareTo(target: any): number;
        ToString(format: string): string;
        ToString(provider: System.IFormatProvider): string;
        HasFlag(flag: System.Enum): boolean;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:Calendar
        名前空間:System.Globalization
        完全限定名:System.Globalization.Calendar
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
        */
        interface Calendar {
            CurrentEra :number;
            MinSupportedDateTime :System.DateTime;
            MaxSupportedDateTime :System.DateTime;
            AlgorithmType :System.Globalization.CalendarAlgorithmType;
            IsReadOnly :boolean;
            Eras :number[];
            TwoDigitYearMax :number;
            Clone(): any;
            ReadOnly(calendar: System.Globalization.Calendar): System.Globalization.Calendar;
            AddMilliseconds(time: System.DateTime, milliseconds: number): System.DateTime;
            AddDays(time: System.DateTime, days: number): System.DateTime;
            AddHours(time: System.DateTime, hours: number): System.DateTime;
            AddMinutes(time: System.DateTime, minutes: number): System.DateTime;
            AddMonths(time: System.DateTime, months: number): System.DateTime;
            AddSeconds(time: System.DateTime, seconds: number): System.DateTime;
            AddWeeks(time: System.DateTime, weeks: number): System.DateTime;
            AddYears(time: System.DateTime, years: number): System.DateTime;
            GetDayOfMonth(time: System.DateTime): number;
            GetDayOfWeek(time: System.DateTime): System.DayOfWeek;
            GetDayOfYear(time: System.DateTime): number;
            GetDaysInMonth(year: number, month: number): number;
            GetDaysInMonth(year: number, month: number, era: number): number;
            GetDaysInYear(year: number): number;
            GetDaysInYear(year: number, era: number): number;
            GetEra(time: System.DateTime): number;
            GetHour(time: System.DateTime): number;
            GetMilliseconds(time: System.DateTime): number;
            GetMinute(time: System.DateTime): number;
            GetMonth(time: System.DateTime): number;
            GetMonthsInYear(year: number): number;
            GetMonthsInYear(year: number, era: number): number;
            GetSecond(time: System.DateTime): number;
            GetWeekOfYear(time: System.DateTime, rule: System.Globalization.CalendarWeekRule, firstDayOfWeek: System.DayOfWeek): number;
            GetYear(time: System.DateTime): number;
            IsLeapDay(year: number, month: number, day: number): boolean;
            IsLeapDay(year: number, month: number, day: number, era: number): boolean;
            IsLeapMonth(year: number, month: number): boolean;
            IsLeapMonth(year: number, month: number, era: number): boolean;
            GetLeapMonth(year: number): number;
            GetLeapMonth(year: number, era: number): number;
            IsLeapYear(year: number): boolean;
            IsLeapYear(year: number, era: number): boolean;
            ToDateTime(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number): System.DateTime;
            ToDateTime(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, era: number): System.DateTime;
            ToFourDigitYear(year: number): number;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:DayOfWeek
    名前空間:System
    完全限定名:System.DayOfWeek
    このメンバを宣言するクラス:
    親クラス:System.Enum
    属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
    */
    interface DayOfWeek {
        value__ :number;
        Sunday :System.DayOfWeek;
        Monday :System.DayOfWeek;
        Tuesday :System.DayOfWeek;
        Wednesday :System.DayOfWeek;
        Thursday :System.DayOfWeek;
        Friday :System.DayOfWeek;
        Saturday :System.DayOfWeek;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        CompareTo(target: any): number;
        ToString(format: string): string;
        ToString(provider: System.IFormatProvider): string;
        HasFlag(flag: System.Enum): boolean;
        GetTypeCode(): System.TypeCode;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:TimeSpan
    名前空間:System
    完全限定名:System.TimeSpan
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface TimeSpan {
        new(ticks: number);
        new(hours: number, minutes: number, seconds: number);
        new(days: number, hours: number, minutes: number, seconds: number);
        new(days: number, hours: number, minutes: number, seconds: number, milliseconds: number);
        Zero :System.TimeSpan;
        MaxValue :System.TimeSpan;
        MinValue :System.TimeSpan;
        TicksPerMillisecond :number;
        TicksPerSecond :number;
        TicksPerMinute :number;
        TicksPerHour :number;
        TicksPerDay :number;
        Ticks :number;
        Days :number;
        Hours :number;
        Milliseconds :number;
        Minutes :number;
        Seconds :number;
        TotalDays :number;
        TotalHours :number;
        TotalMilliseconds :number;
        TotalMinutes :number;
        TotalSeconds :number;
        Add(ts: System.TimeSpan): System.TimeSpan;
        Compare(t1: System.TimeSpan, t2: System.TimeSpan): number;
        CompareTo(value: any): number;
        CompareTo(value: System.TimeSpan): number;
        FromDays(value: number): System.TimeSpan;
        Duration(): System.TimeSpan;
        Equals(value: any): boolean;
        Equals(obj: System.TimeSpan): boolean;
        Equals(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
        GetHashCode(): number;
        FromHours(value: number): System.TimeSpan;
        FromMilliseconds(value: number): System.TimeSpan;
        FromMinutes(value: number): System.TimeSpan;
        Negate(): System.TimeSpan;
        FromSeconds(value: number): System.TimeSpan;
        Subtract(ts: System.TimeSpan): System.TimeSpan;
        FromTicks(value: number): System.TimeSpan;
        Parse(s: string): System.TimeSpan;
        Parse(input: string, formatProvider: System.IFormatProvider): System.TimeSpan;
        ParseExact(input: string, format: string, formatProvider: System.IFormatProvider): System.TimeSpan;
        ParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider): System.TimeSpan;
        ParseExact(input: string, format: string, formatProvider: System.IFormatProvider, styles: System.Globalization.TimeSpanStyles): System.TimeSpan;
        ParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, styles: System.Globalization.TimeSpanStyles): System.TimeSpan;
        TryParse(s: string, result: System.TimeSpan): boolean;
        TryParse(input: string, formatProvider: System.IFormatProvider, result: System.TimeSpan): boolean;
        TryParseExact(input: string, format: string, formatProvider: System.IFormatProvider, result: System.TimeSpan): boolean;
        TryParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, result: System.TimeSpan): boolean;
        TryParseExact(input: string, format: string, formatProvider: System.IFormatProvider, styles: System.Globalization.TimeSpanStyles, result: System.TimeSpan): boolean;
        TryParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, styles: System.Globalization.TimeSpanStyles, result: System.TimeSpan): boolean;
        ToString(): string;
        ToString(format: string): string;
        ToString(format: string, formatProvider: System.IFormatProvider): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:DateTimeStyles
        名前空間:System.Globalization
        完全限定名:System.Globalization.DateTimeStyles
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface DateTimeStyles {
            value__ :number;
            None :System.Globalization.DateTimeStyles;
            AllowLeadingWhite :System.Globalization.DateTimeStyles;
            AllowTrailingWhite :System.Globalization.DateTimeStyles;
            AllowInnerWhite :System.Globalization.DateTimeStyles;
            AllowWhiteSpaces :System.Globalization.DateTimeStyles;
            NoCurrentDateDefault :System.Globalization.DateTimeStyles;
            AdjustToUniversal :System.Globalization.DateTimeStyles;
            AssumeLocal :System.Globalization.DateTimeStyles;
            AssumeUniversal :System.Globalization.DateTimeStyles;
            RoundtripKind :System.Globalization.DateTimeStyles;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:Enum
    名前空間:System
    完全限定名:System.Enum
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
    */
    interface Enum {
        TryParse<TEnum>(value: string, result: TEnum): boolean;
        TryParse<TEnum>(value: string, ignoreCase: boolean, result: TEnum): boolean;
        Parse(enumType: System.Type, value: string): any;
        Parse(enumType: System.Type, value: string, ignoreCase: boolean): any;
        GetUnderlyingType(enumType: System.Type): System.Type;
        GetValues(enumType: System.Type): System.Array;
        GetName(enumType: System.Type, value: any): string;
        GetNames(enumType: System.Type): string[];
        ToObject(enumType: System.Type, value: any): any;
        IsDefined(enumType: System.Type, value: any): boolean;
        Format(enumType: System.Type, value: any, format: string): string;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(format: string, provider: System.IFormatProvider): string;
        CompareTo(target: any): number;
        ToString(format: string): string;
        ToString(provider: System.IFormatProvider): string;
        HasFlag(flag: System.Enum): boolean;
        GetTypeCode(): System.TypeCode;
        ToObject(enumType: System.Type, value: System.SByte): any;
        ToObject(enumType: System.Type, value: System.Int16): any;
        ToObject(enumType: System.Type, value: number): any;
        ToObject(enumType: System.Type, value: System.Byte): any;
        ToObject(enumType: System.Type, value: System.UInt16): any;
        ToObject(enumType: System.Type, value: number): any;
        ToObject(enumType: System.Type, value: number): any;
        ToObject(enumType: System.Type, value: number): any;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:IntPtr
    名前空間:System
    完全限定名:System.IntPtr
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface IntPtr {
        new(value: number);
        new(value: number);
        new(value: System.Void);
        Zero :System.IntPtr;
        Size :number;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToInt32(): number;
        ToInt64(): number;
        ToString(): string;
        ToString(format: string): string;
        Add(pointer: System.IntPtr, offset: number): System.IntPtr;
        Subtract(pointer: System.IntPtr, offset: number): System.IntPtr;
        ToPointer(): System.Void;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:AsyncCallback
    名前空間:System
    完全限定名:System.AsyncCallback
    このメンバを宣言するクラス:
    親クラス:System.MulticastDelegate
    属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
    */
    interface AsyncCallback {
        new(object: any, method: System.IntPtr);
        Method :System.Reflection.MethodInfo;
        Target :any;
        Invoke(ar: System.IAsyncResult): void;
        BeginInvoke(ar: System.IAsyncResult, callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        Equals(obj: any): boolean;
        GetInvocationList(): System.Delegate[];
        GetHashCode(): number;
        DynamicInvoke(args: any[]): any;
        Clone(): any;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    /**
    名前:IAsyncResult
    名前空間:System
    完全限定名:System.IAsyncResult
    このメンバを宣言するクラス:
    親クラス:
    属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
    */
    interface IAsyncResult {
        IsCompleted :boolean;
        AsyncWaitHandle :System.Threading.WaitHandle;
        AsyncState :any;
        CompletedSynchronously :boolean;
    }
}
declare namespace System {
    /**
    名前:Delegate
    名前空間:System
    完全限定名:System.Delegate
    このメンバを宣言するクラス:
    親クラス:System.Object
    属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
    */
    interface Delegate {
        Method :System.Reflection.MethodInfo;
        Target :any;
        DynamicInvoke(args: any[]): any;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        Combine(a: System.Delegate, b: System.Delegate): System.Delegate;
        Combine(delegates: System.Delegate[]): System.Delegate;
        GetInvocationList(): System.Delegate[];
        Remove(source: System.Delegate, value: System.Delegate): System.Delegate;
        RemoveAll(source: System.Delegate, value: System.Delegate): System.Delegate;
        Clone(): any;
        CreateDelegate(type: System.Type, target: any, method: string): System.Delegate;
        CreateDelegate(type: System.Type, target: any, method: string, ignoreCase: boolean): System.Delegate;
        CreateDelegate(type: System.Type, target: any, method: string, ignoreCase: boolean, throwOnBindFailure: boolean): System.Delegate;
        CreateDelegate(type: System.Type, target: System.Type, method: string): System.Delegate;
        CreateDelegate(type: System.Type, target: System.Type, method: string, ignoreCase: boolean): System.Delegate;
        CreateDelegate(type: System.Type, target: System.Type, method: string, ignoreCase: boolean, throwOnBindFailure: boolean): System.Delegate;
        CreateDelegate(type: System.Type, method: System.Reflection.MethodInfo, throwOnBindFailure: boolean): System.Delegate;
        CreateDelegate(type: System.Type, firstArgument: any, method: System.Reflection.MethodInfo): System.Delegate;
        CreateDelegate(type: System.Type, firstArgument: any, method: System.Reflection.MethodInfo, throwOnBindFailure: boolean): System.Delegate;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        CreateDelegate(type: System.Type, method: System.Reflection.MethodInfo): System.Delegate;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MethodImplAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.MethodImplAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface MethodImplAttributes {
            value__ :number;
            CodeTypeMask :System.Reflection.MethodImplAttributes;
            IL :System.Reflection.MethodImplAttributes;
            Native :System.Reflection.MethodImplAttributes;
            OPTIL :System.Reflection.MethodImplAttributes;
            Runtime :System.Reflection.MethodImplAttributes;
            ManagedMask :System.Reflection.MethodImplAttributes;
            Unmanaged :System.Reflection.MethodImplAttributes;
            Managed :System.Reflection.MethodImplAttributes;
            ForwardRef :System.Reflection.MethodImplAttributes;
            PreserveSig :System.Reflection.MethodImplAttributes;
            InternalCall :System.Reflection.MethodImplAttributes;
            Synchronized :System.Reflection.MethodImplAttributes;
            NoInlining :System.Reflection.MethodImplAttributes;
            AggressiveInlining :System.Reflection.MethodImplAttributes;
            NoOptimization :System.Reflection.MethodImplAttributes;
            MaxMethodImplVal :System.Reflection.MethodImplAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:RuntimeMethodHandle
    名前空間:System
    完全限定名:System.RuntimeMethodHandle
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface RuntimeMethodHandle {
        Value :System.IntPtr;
        GetFunctionPointer(): System.IntPtr;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        GetHashCode(): number;
        Equals(obj: any): boolean;
        Equals(handle: System.RuntimeMethodHandle): boolean;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MethodAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.MethodAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface MethodAttributes {
            value__ :number;
            MemberAccessMask :System.Reflection.MethodAttributes;
            PrivateScope :System.Reflection.MethodAttributes;
            Private :System.Reflection.MethodAttributes;
            FamANDAssem :System.Reflection.MethodAttributes;
            Assembly :System.Reflection.MethodAttributes;
            Family :System.Reflection.MethodAttributes;
            FamORAssem :System.Reflection.MethodAttributes;
            Public :System.Reflection.MethodAttributes;
            Static :System.Reflection.MethodAttributes;
            Final :System.Reflection.MethodAttributes;
            Virtual :System.Reflection.MethodAttributes;
            HideBySig :System.Reflection.MethodAttributes;
            CheckAccessOnOverride :System.Reflection.MethodAttributes;
            VtableLayoutMask :System.Reflection.MethodAttributes;
            ReuseSlot :System.Reflection.MethodAttributes;
            NewSlot :System.Reflection.MethodAttributes;
            Abstract :System.Reflection.MethodAttributes;
            SpecialName :System.Reflection.MethodAttributes;
            PinvokeImpl :System.Reflection.MethodAttributes;
            UnmanagedExport :System.Reflection.MethodAttributes;
            RTSpecialName :System.Reflection.MethodAttributes;
            ReservedMask :System.Reflection.MethodAttributes;
            HasSecurity :System.Reflection.MethodAttributes;
            RequireSecObject :System.Reflection.MethodAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ParameterInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.ParameterInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface ParameterInfo {
            ParameterType :System.Type;
            Name :string;
            HasDefaultValue :boolean;
            DefaultValue :any;
            RawDefaultValue :any;
            Position :number;
            Attributes :System.Reflection.ParameterAttributes;
            Member :System.Reflection.MemberInfo;
            IsIn :boolean;
            IsOut :boolean;
            IsLcid :boolean;
            IsRetval :boolean;
            IsOptional :boolean;
            MetadataToken :number;
            CustomAttributes :any;
            GetRequiredCustomModifiers(): System.Type[];
            GetOptionalCustomModifiers(): System.Type[];
            ToString(): string;
            GetCustomAttributes(inherit: boolean): any[];
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
            GetCustomAttributesData(): any;
            GetRealObject(context: System.Runtime.Serialization.StreamingContext): any;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:MethodBody
        名前空間:System.Reflection
        完全限定名:System.Reflection.MethodBody
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
        */
        interface MethodBody {
            LocalSignatureMetadataToken :number;
            LocalVariables :any;
            MaxStackSize :number;
            InitLocals :boolean;
            ExceptionHandlingClauses :any;
            GetILAsByteArray(): System.Byte[];
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace InteropServices {
            /**
            名前:LayoutKind
            名前空間:System.Runtime.InteropServices
            完全限定名:System.Runtime.InteropServices.LayoutKind
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface LayoutKind {
                value__ :number;
                Sequential :System.Runtime.InteropServices.LayoutKind;
                Explicit :System.Runtime.InteropServices.LayoutKind;
                Auto :System.Runtime.InteropServices.LayoutKind;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace InteropServices {
            /**
            名前:CharSet
            名前空間:System.Runtime.InteropServices
            完全限定名:System.Runtime.InteropServices.CharSet
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface CharSet {
                value__ :number;
                None :System.Runtime.InteropServices.CharSet;
                Ansi :System.Runtime.InteropServices.CharSet;
                Unicode :System.Runtime.InteropServices.CharSet;
                Auto :System.Runtime.InteropServices.CharSet;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:ModuleHandle
    名前空間:System
    完全限定名:System.ModuleHandle
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
    */
    interface ModuleHandle {
        EmptyHandle :System.ModuleHandle;
        MDStreamVersion :number;
        GetHashCode(): number;
        Equals(obj: any): boolean;
        Equals(handle: System.ModuleHandle): boolean;
        GetRuntimeTypeHandleFromMetadataToken(typeToken: number): System.RuntimeTypeHandle;
        ResolveTypeHandle(typeToken: number): System.RuntimeTypeHandle;
        ResolveTypeHandle(typeToken: number, typeInstantiationContext: System.RuntimeTypeHandle[], methodInstantiationContext: System.RuntimeTypeHandle[]): System.RuntimeTypeHandle;
        GetRuntimeMethodHandleFromMetadataToken(methodToken: number): System.RuntimeMethodHandle;
        ResolveMethodHandle(methodToken: number): System.RuntimeMethodHandle;
        ResolveMethodHandle(methodToken: number, typeInstantiationContext: System.RuntimeTypeHandle[], methodInstantiationContext: System.RuntimeTypeHandle[]): System.RuntimeMethodHandle;
        GetRuntimeFieldHandleFromMetadataToken(fieldToken: number): System.RuntimeFieldHandle;
        ResolveFieldHandle(fieldToken: number): System.RuntimeFieldHandle;
        ResolveFieldHandle(fieldToken: number, typeInstantiationContext: System.RuntimeTypeHandle[], methodInstantiationContext: System.RuntimeTypeHandle[]): System.RuntimeFieldHandle;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:PortableExecutableKinds
        名前空間:System.Reflection
        完全限定名:System.Reflection.PortableExecutableKinds
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface PortableExecutableKinds {
            value__ :number;
            NotAPortableExecutableImage :System.Reflection.PortableExecutableKinds;
            ILOnly :System.Reflection.PortableExecutableKinds;
            Required32Bit :System.Reflection.PortableExecutableKinds;
            PE32Plus :System.Reflection.PortableExecutableKinds;
            Unmanaged32Bit :System.Reflection.PortableExecutableKinds;
            Preferred32Bit :System.Reflection.PortableExecutableKinds;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ImageFileMachine
        名前空間:System.Reflection
        完全限定名:System.Reflection.ImageFileMachine
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface ImageFileMachine {
            value__ :number;
            I386 :System.Reflection.ImageFileMachine;
            IA64 :System.Reflection.ImageFileMachine;
            AMD64 :System.Reflection.ImageFileMachine;
            ARM :System.Reflection.ImageFileMachine;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Cryptography {
            namespace X509Certificates {
                /**
                名前:X509Certificate
                名前空間:System.Security.Cryptography.X509Certificates
                完全限定名:System.Security.Cryptography.X509Certificates.X509Certificate
                このメンバを宣言するクラス:
                親クラス:System.Object
                属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
                */
                interface X509Certificate {
                    new(handle: System.IntPtr);
                    new();
                    new(data: System.Byte[]);
                    new(rawData: System.Byte[], password: string);
                    new(rawData: System.Byte[], password: System.Security.SecureString);
                    new(rawData: System.Byte[], password: string, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags);
                    new(rawData: System.Byte[], password: System.Security.SecureString, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags);
                    new(fileName: string);
                    new(fileName: string, password: string);
                    new(fileName: string, password: System.Security.SecureString);
                    new(fileName: string, password: string, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags);
                    new(fileName: string, password: System.Security.SecureString, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags);
                    new(cert: System.Security.Cryptography.X509Certificates.X509Certificate);
                    new(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext);
                    Handle :System.IntPtr;
                    Issuer :string;
                    Subject :string;
                    GetRawCertData(): System.Byte[];
                    Reset(): void;
                    CreateFromCertFile(filename: string): System.Security.Cryptography.X509Certificates.X509Certificate;
                    CreateFromSignedFile(filename: string): System.Security.Cryptography.X509Certificates.X509Certificate;
                    GetName(): string;
                    GetIssuerName(): string;
                    GetSerialNumber(): System.Byte[];
                    GetSerialNumberString(): string;
                    GetKeyAlgorithmParameters(): System.Byte[];
                    GetKeyAlgorithmParametersString(): string;
                    GetKeyAlgorithm(): string;
                    GetPublicKey(): System.Byte[];
                    GetPublicKeyString(): string;
                    GetRawCertDataString(): string;
                    GetCertHash(): System.Byte[];
                    GetCertHashString(): string;
                    GetEffectiveDateString(): string;
                    GetExpirationDateString(): string;
                    Equals(obj: any): boolean;
                    Equals(other: System.Security.Cryptography.X509Certificates.X509Certificate): boolean;
                    GetHashCode(): number;
                    ToString(): string;
                    ToString(fVerbose: boolean): string;
                    GetFormat(): string;
                    Import(rawData: System.Byte[]): void;
                    Import(rawData: System.Byte[], password: string, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags): void;
                    Import(rawData: System.Byte[], password: System.Security.SecureString, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags): void;
                    Import(fileName: string): void;
                    Import(fileName: string, password: string, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags): void;
                    Import(fileName: string, password: System.Security.SecureString, keyStorageFlags: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags): void;
                    Export(contentType: System.Security.Cryptography.X509Certificates.X509ContentType): System.Byte[];
                    Export(contentType: System.Security.Cryptography.X509Certificates.X509ContentType, password: string): System.Byte[];
                    Export(contentType: System.Security.Cryptography.X509Certificates.X509ContentType, password: System.Security.SecureString): System.Byte[];
                    Dispose(): void;
                    GetType(): System.Type;
                }
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Policy {
            /**
            名前:Evidence
            名前空間:System.Security.Policy
            完全限定名:System.Security.Policy.Evidence
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
            */
            interface Evidence {
                new();
                new(evidence: System.Security.Policy.Evidence);
                new(hostEvidence: any[], assemblyEvidence: any[]);
                new(hostEvidence: System.Security.Policy.EvidenceBase[], assemblyEvidence: System.Security.Policy.EvidenceBase[]);
                Locked :boolean;
                Count :number;
                SyncRoot :any;
                IsSynchronized :boolean;
                IsReadOnly :boolean;
                AddHost(id: any): void;
                AddAssembly(id: any): void;
                AddAssemblyEvidence<T>(evidence: T): void;
                AddHostEvidence<T>(evidence: T): void;
                Merge(evidence: System.Security.Policy.Evidence): void;
                CopyTo(array: System.Array, index: number): void;
                GetHostEnumerator(): System.Collections.IEnumerator;
                GetAssemblyEnumerator(): System.Collections.IEnumerator;
                GetEnumerator(): System.Collections.IEnumerator;
                GetAssemblyEvidence<T>(): T;
                GetHostEvidence<T>(): T;
                Clone(): System.Security.Policy.Evidence;
                Clear(): void;
                RemoveType(t: System.Type): void;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        /**
        名前:PermissionSet
        名前空間:System.Security
        完全限定名:System.Security.PermissionSet
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
        */
        interface PermissionSet {
            new(state: System.Security.Permissions.PermissionState);
            new(permSet: System.Security.PermissionSet);
            SyncRoot :any;
            IsSynchronized :boolean;
            IsReadOnly :boolean;
            Count :number;
            CopyTo(array: System.Array, index: number): void;
            IsEmpty(): boolean;
            GetPermission(permClass: System.Type): System.Security.IPermission;
            SetPermission(perm: System.Security.IPermission): System.Security.IPermission;
            AddPermission(perm: System.Security.IPermission): System.Security.IPermission;
            RemovePermission(permClass: System.Type): System.Security.IPermission;
            IsUnrestricted(): boolean;
            IsSubsetOf(target: System.Security.PermissionSet): boolean;
            Intersect(other: System.Security.PermissionSet): System.Security.PermissionSet;
            Union(other: System.Security.PermissionSet): System.Security.PermissionSet;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            Demand(): void;
            Assert(): void;
            Deny(): void;
            PermitOnly(): void;
            Copy(): System.Security.PermissionSet;
            GetEnumerator(): System.Collections.IEnumerator;
            ToString(): string;
            FromXml(et: System.Security.SecurityElement): void;
            ToXml(): System.Security.SecurityElement;
            ConvertPermissionSet(inFormat: string, inData: System.Byte[], outFormat: string): System.Byte[];
            ContainsNonCodeAccessPermissions(): boolean;
            RevertAssert(): void;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Security {
        /**
        名前:SecurityRuleSet
        名前空間:System.Security
        完全限定名:System.Security.SecurityRuleSet
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed
        */
        interface SecurityRuleSet {
            value__ :System.Byte;
            None :System.Security.SecurityRuleSet;
            Level1 :System.Security.SecurityRuleSet;
            Level2 :System.Security.SecurityRuleSet;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Configuration {
        namespace Assemblies {
            /**
            名前:AssemblyHashAlgorithm
            名前空間:System.Configuration.Assemblies
            完全限定名:System.Configuration.Assemblies.AssemblyHashAlgorithm
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface AssemblyHashAlgorithm {
                value__ :number;
                None :System.Configuration.Assemblies.AssemblyHashAlgorithm;
                MD5 :System.Configuration.Assemblies.AssemblyHashAlgorithm;
                SHA1 :System.Configuration.Assemblies.AssemblyHashAlgorithm;
                SHA256 :System.Configuration.Assemblies.AssemblyHashAlgorithm;
                SHA384 :System.Configuration.Assemblies.AssemblyHashAlgorithm;
                SHA512 :System.Configuration.Assemblies.AssemblyHashAlgorithm;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:AssemblyName
        名前空間:System.Reflection
        完全限定名:System.Reflection.AssemblyName
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
        */
        interface AssemblyName {
            new();
            new(assemblyName: string);
            Name :string;
            Version :System.Version;
            CultureInfo :System.Globalization.CultureInfo;
            CultureName :string;
            CodeBase :string;
            EscapedCodeBase :string;
            ProcessorArchitecture :System.Reflection.ProcessorArchitecture;
            ContentType :System.Reflection.AssemblyContentType;
            Flags :System.Reflection.AssemblyNameFlags;
            HashAlgorithm :System.Configuration.Assemblies.AssemblyHashAlgorithm;
            VersionCompatibility :System.Configuration.Assemblies.AssemblyVersionCompatibility;
            KeyPair :System.Reflection.StrongNameKeyPair;
            FullName :string;
            Clone(): any;
            GetAssemblyName(assemblyFile: string): System.Reflection.AssemblyName;
            GetPublicKey(): System.Byte[];
            SetPublicKey(publicKey: System.Byte[]): void;
            GetPublicKeyToken(): System.Byte[];
            SetPublicKeyToken(publicKeyToken: System.Byte[]): void;
            ToString(): string;
            GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
            OnDeserialization(sender: any): void;
            ReferenceMatchesDefinition(reference: System.Reflection.AssemblyName, definition: System.Reflection.AssemblyName): boolean;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Security {
        /**
        名前:SecurityContextSource
        名前空間:System.Security
        完全限定名:System.Security.SecurityContextSource
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed
        */
        interface SecurityContextSource {
            value__ :number;
            CurrentAppDomain :System.Security.SecurityContextSource;
            CurrentAssembly :System.Security.SecurityContextSource;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:Stream
        名前空間:System.IO
        完全限定名:System.IO.Stream
        このメンバを宣言するクラス:
        親クラス:System.MarshalByRefObject
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
        */
        interface Stream {
            Null :System.IO.Stream;
            CanRead :boolean;
            CanSeek :boolean;
            CanTimeout :boolean;
            CanWrite :boolean;
            Length :number;
            Position :number;
            ReadTimeout :number;
            WriteTimeout :number;
            CopyToAsync(destination: System.IO.Stream): System.Threading.Tasks.Task;
            CopyToAsync(destination: System.IO.Stream, bufferSize: number): System.Threading.Tasks.Task;
            CopyToAsync(destination: System.IO.Stream, bufferSize: number, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
            CopyTo(destination: System.IO.Stream): void;
            CopyTo(destination: System.IO.Stream, bufferSize: number): void;
            Close(): void;
            Dispose(): void;
            Flush(): void;
            FlushAsync(): System.Threading.Tasks.Task;
            FlushAsync(cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
            BeginRead(buffer: System.Byte[], offset: number, count: number, callback: System.AsyncCallback, state: any): System.IAsyncResult;
            EndRead(asyncResult: System.IAsyncResult): number;
            ReadAsync(buffer: System.Byte[], offset: number, count: number): any;
            ReadAsync(buffer: System.Byte[], offset: number, count: number, cancellationToken: System.Threading.CancellationToken): any;
            BeginWrite(buffer: System.Byte[], offset: number, count: number, callback: System.AsyncCallback, state: any): System.IAsyncResult;
            EndWrite(asyncResult: System.IAsyncResult): void;
            WriteAsync(buffer: System.Byte[], offset: number, count: number): System.Threading.Tasks.Task;
            WriteAsync(buffer: System.Byte[], offset: number, count: number, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
            Seek(offset: number, origin: System.IO.SeekOrigin): number;
            SetLength(value: number): void;
            Read(buffer: System.Byte[], offset: number, count: number): number;
            ReadByte(): number;
            Write(buffer: System.Byte[], offset: number, count: number): void;
            WriteByte(value: System.Byte): void;
            Synchronized(stream: System.IO.Stream): System.IO.Stream;
            GetLifetimeService(): any;
            InitializeLifetimeService(): any;
            CreateObjRef(requestedType: System.Type): System.Runtime.Remoting.ObjRef;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:Version
    名前空間:System
    完全限定名:System.Version
    このメンバを宣言するクラス:
    親クラス:System.Object
    属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
    */
    interface Version {
        new(major: number, minor: number, build: number, revision: number);
        new(major: number, minor: number, build: number);
        new(major: number, minor: number);
        new(version: string);
        new();
        Major :number;
        Minor :number;
        Build :number;
        Revision :number;
        MajorRevision :System.Int16;
        MinorRevision :System.Int16;
        Clone(): any;
        CompareTo(version: any): number;
        CompareTo(value: System.Version): number;
        Equals(obj: any): boolean;
        Equals(obj: System.Version): boolean;
        GetHashCode(): number;
        ToString(): string;
        ToString(fieldCount: number): string;
        Parse(input: string): System.Version;
        TryParse(input: string, result: System.Version): boolean;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:FileStream
        名前空間:System.IO
        完全限定名:System.IO.FileStream
        このメンバを宣言するクラス:
        親クラス:System.IO.Stream
        属性:AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
        */
        interface FileStream {
            new(path: string, mode: System.IO.FileMode);
            new(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess);
            new(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare);
            new(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, bufferSize: number);
            new(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, bufferSize: number, options: System.IO.FileOptions);
            new(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, bufferSize: number, useAsync: boolean);
            new(path: string, mode: System.IO.FileMode, rights: System.Security.AccessControl.FileSystemRights, share: System.IO.FileShare, bufferSize: number, options: System.IO.FileOptions, fileSecurity: System.Security.AccessControl.FileSecurity);
            new(path: string, mode: System.IO.FileMode, rights: System.Security.AccessControl.FileSystemRights, share: System.IO.FileShare, bufferSize: number, options: System.IO.FileOptions);
            new(handle: System.IntPtr, access: System.IO.FileAccess);
            new(handle: System.IntPtr, access: System.IO.FileAccess, ownsHandle: boolean);
            new(handle: System.IntPtr, access: System.IO.FileAccess, ownsHandle: boolean, bufferSize: number);
            new(handle: System.IntPtr, access: System.IO.FileAccess, ownsHandle: boolean, bufferSize: number, isAsync: boolean);
            new(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO.FileAccess);
            new(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO.FileAccess, bufferSize: number);
            new(handle: Microsoft.Win32.SafeHandles.SafeFileHandle, access: System.IO.FileAccess, bufferSize: number, isAsync: boolean);
            CanRead :boolean;
            CanWrite :boolean;
            CanSeek :boolean;
            IsAsync :boolean;
            Length :number;
            Name :string;
            Position :number;
            Handle :System.IntPtr;
            SafeFileHandle :Microsoft.Win32.SafeHandles.SafeFileHandle;
            CanTimeout :boolean;
            ReadTimeout :number;
            WriteTimeout :number;
            GetAccessControl(): System.Security.AccessControl.FileSecurity;
            SetAccessControl(fileSecurity: System.Security.AccessControl.FileSecurity): void;
            Flush(): void;
            Flush(flushToDisk: boolean): void;
            SetLength(value: number): void;
            Read(array: System.Byte[], offset: number, count: number): number;
            Seek(offset: number, origin: System.IO.SeekOrigin): number;
            Write(array: System.Byte[], offset: number, count: number): void;
            BeginRead(array: System.Byte[], offset: number, numBytes: number, userCallback: System.AsyncCallback, stateObject: any): System.IAsyncResult;
            EndRead(asyncResult: System.IAsyncResult): number;
            ReadByte(): number;
            BeginWrite(array: System.Byte[], offset: number, numBytes: number, userCallback: System.AsyncCallback, stateObject: any): System.IAsyncResult;
            EndWrite(asyncResult: System.IAsyncResult): void;
            WriteByte(value: System.Byte): void;
            Lock(position: number, length: number): void;
            Unlock(position: number, length: number): void;
            ReadAsync(buffer: System.Byte[], offset: number, count: number, cancellationToken: System.Threading.CancellationToken): any;
            WriteAsync(buffer: System.Byte[], offset: number, count: number, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
            FlushAsync(cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
            CopyToAsync(destination: System.IO.Stream): System.Threading.Tasks.Task;
            CopyToAsync(destination: System.IO.Stream, bufferSize: number): System.Threading.Tasks.Task;
            CopyToAsync(destination: System.IO.Stream, bufferSize: number, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
            CopyTo(destination: System.IO.Stream): void;
            CopyTo(destination: System.IO.Stream, bufferSize: number): void;
            Close(): void;
            Dispose(): void;
            FlushAsync(): System.Threading.Tasks.Task;
            ReadAsync(buffer: System.Byte[], offset: number, count: number): any;
            WriteAsync(buffer: System.Byte[], offset: number, count: number): System.Threading.Tasks.Task;
            GetLifetimeService(): any;
            InitializeLifetimeService(): any;
            CreateObjRef(requestedType: System.Type): System.Runtime.Remoting.ObjRef;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ManifestResourceInfo
        名前空間:System.Reflection
        完全限定名:System.Reflection.ManifestResourceInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
        */
        interface ManifestResourceInfo {
            new(containingAssembly: System.Reflection.Assembly, containingFileName: string, resourceLocation: System.Reflection.ResourceLocation);
            ReferencedAssembly :System.Reflection.Assembly;
            FileName :string;
            ResourceLocation :System.Reflection.ResourceLocation;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:CompareInfo
        名前空間:System.Globalization
        完全限定名:System.Globalization.CompareInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface CompareInfo {
            Name :string;
            LCID :number;
            Version :System.Globalization.SortVersion;
            Compare(string1: string, offset1: number, length1: number, string2: string, offset2: number, length2: number, options: System.Globalization.CompareOptions): number;
            IsPrefix(source: string, prefix: string, options: System.Globalization.CompareOptions): boolean;
            IsSuffix(source: string, suffix: string, options: System.Globalization.CompareOptions): boolean;
            GetCompareInfo(culture: number, assembly: System.Reflection.Assembly): System.Globalization.CompareInfo;
            GetCompareInfo(name: string, assembly: System.Reflection.Assembly): System.Globalization.CompareInfo;
            GetCompareInfo(culture: number): System.Globalization.CompareInfo;
            GetCompareInfo(name: string): System.Globalization.CompareInfo;
            IsSortable(ch: System.Char): boolean;
            IsSortable(text: string): boolean;
            Compare(string1: string, string2: string): number;
            Compare(string1: string, string2: string, options: System.Globalization.CompareOptions): number;
            Compare(string1: string, offset1: number, length1: number, string2: string, offset2: number, length2: number): number;
            Compare(string1: string, offset1: number, string2: string, offset2: number, options: System.Globalization.CompareOptions): number;
            Compare(string1: string, offset1: number, string2: string, offset2: number): number;
            IsPrefix(source: string, prefix: string): boolean;
            IsSuffix(source: string, suffix: string): boolean;
            IndexOf(source: string, value: System.Char): number;
            IndexOf(source: string, value: string): number;
            IndexOf(source: string, value: System.Char, options: System.Globalization.CompareOptions): number;
            IndexOf(source: string, value: string, options: System.Globalization.CompareOptions): number;
            IndexOf(source: string, value: System.Char, startIndex: number): number;
            IndexOf(source: string, value: string, startIndex: number): number;
            IndexOf(source: string, value: System.Char, startIndex: number, options: System.Globalization.CompareOptions): number;
            IndexOf(source: string, value: string, startIndex: number, options: System.Globalization.CompareOptions): number;
            IndexOf(source: string, value: System.Char, startIndex: number, count: number): number;
            IndexOf(source: string, value: string, startIndex: number, count: number): number;
            IndexOf(source: string, value: System.Char, startIndex: number, count: number, options: System.Globalization.CompareOptions): number;
            IndexOf(source: string, value: string, startIndex: number, count: number, options: System.Globalization.CompareOptions): number;
            LastIndexOf(source: string, value: System.Char): number;
            LastIndexOf(source: string, value: string): number;
            LastIndexOf(source: string, value: System.Char, options: System.Globalization.CompareOptions): number;
            LastIndexOf(source: string, value: string, options: System.Globalization.CompareOptions): number;
            LastIndexOf(source: string, value: System.Char, startIndex: number): number;
            LastIndexOf(source: string, value: string, startIndex: number): number;
            LastIndexOf(source: string, value: System.Char, startIndex: number, options: System.Globalization.CompareOptions): number;
            LastIndexOf(source: string, value: string, startIndex: number, options: System.Globalization.CompareOptions): number;
            LastIndexOf(source: string, value: System.Char, startIndex: number, count: number): number;
            LastIndexOf(source: string, value: string, startIndex: number, count: number): number;
            LastIndexOf(source: string, value: System.Char, startIndex: number, count: number, options: System.Globalization.CompareOptions): number;
            LastIndexOf(source: string, value: string, startIndex: number, count: number, options: System.Globalization.CompareOptions): number;
            GetSortKey(source: string, options: System.Globalization.CompareOptions): System.Globalization.SortKey;
            GetSortKey(source: string): System.Globalization.SortKey;
            Equals(value: any): boolean;
            GetHashCode(): number;
            GetHashCode(source: string, options: System.Globalization.CompareOptions): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:TextInfo
        名前空間:System.Globalization
        完全限定名:System.Globalization.TextInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface TextInfo {
            ANSICodePage :number;
            OEMCodePage :number;
            MacCodePage :number;
            EBCDICCodePage :number;
            LCID :number;
            CultureName :string;
            IsReadOnly :boolean;
            ListSeparator :string;
            IsRightToLeft :boolean;
            Clone(): any;
            ReadOnly(textInfo: System.Globalization.TextInfo): System.Globalization.TextInfo;
            ToLower(c: System.Char): System.Char;
            ToLower(str: string): string;
            ToUpper(c: System.Char): System.Char;
            ToUpper(str: string): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToTitleCase(str: string): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:CultureTypes
        名前空間:System.Globalization
        完全限定名:System.Globalization.CultureTypes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface CultureTypes {
            value__ :number;
            NeutralCultures :System.Globalization.CultureTypes;
            SpecificCultures :System.Globalization.CultureTypes;
            InstalledWin32Cultures :System.Globalization.CultureTypes;
            AllCultures :System.Globalization.CultureTypes;
            UserCustomCulture :System.Globalization.CultureTypes;
            ReplacementCultures :System.Globalization.CultureTypes;
            WindowsOnlyCultures :System.Globalization.CultureTypes;
            FrameworkCultures :System.Globalization.CultureTypes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:NumberFormatInfo
        名前空間:System.Globalization
        完全限定名:System.Globalization.NumberFormatInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
        */
        interface NumberFormatInfo {
            new();
            InvariantInfo :System.Globalization.NumberFormatInfo;
            CurrencyDecimalDigits :number;
            CurrencyDecimalSeparator :string;
            IsReadOnly :boolean;
            CurrencyGroupSizes :number[];
            NumberGroupSizes :number[];
            PercentGroupSizes :number[];
            CurrencyGroupSeparator :string;
            CurrencySymbol :string;
            CurrentInfo :System.Globalization.NumberFormatInfo;
            NaNSymbol :string;
            CurrencyNegativePattern :number;
            NumberNegativePattern :number;
            PercentPositivePattern :number;
            PercentNegativePattern :number;
            NegativeInfinitySymbol :string;
            NegativeSign :string;
            NumberDecimalDigits :number;
            NumberDecimalSeparator :string;
            NumberGroupSeparator :string;
            CurrencyPositivePattern :number;
            PositiveInfinitySymbol :string;
            PositiveSign :string;
            PercentDecimalDigits :number;
            PercentDecimalSeparator :string;
            PercentGroupSeparator :string;
            PercentSymbol :string;
            PerMilleSymbol :string;
            NativeDigits :string[];
            DigitSubstitution :System.Globalization.DigitShapes;
            GetInstance(formatProvider: System.IFormatProvider): System.Globalization.NumberFormatInfo;
            Clone(): any;
            GetFormat(formatType: System.Type): any;
            ReadOnly(nfi: System.Globalization.NumberFormatInfo): System.Globalization.NumberFormatInfo;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:DateTimeFormatInfo
        名前空間:System.Globalization
        完全限定名:System.Globalization.DateTimeFormatInfo
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
        */
        interface DateTimeFormatInfo {
            new();
            InvariantInfo :System.Globalization.DateTimeFormatInfo;
            CurrentInfo :System.Globalization.DateTimeFormatInfo;
            AMDesignator :string;
            Calendar :System.Globalization.Calendar;
            DateSeparator :string;
            FirstDayOfWeek :System.DayOfWeek;
            CalendarWeekRule :System.Globalization.CalendarWeekRule;
            FullDateTimePattern :string;
            LongDatePattern :string;
            LongTimePattern :string;
            MonthDayPattern :string;
            PMDesignator :string;
            RFC1123Pattern :string;
            ShortDatePattern :string;
            ShortTimePattern :string;
            SortableDateTimePattern :string;
            TimeSeparator :string;
            UniversalSortableDateTimePattern :string;
            YearMonthPattern :string;
            AbbreviatedDayNames :string[];
            ShortestDayNames :string[];
            DayNames :string[];
            AbbreviatedMonthNames :string[];
            MonthNames :string[];
            IsReadOnly :boolean;
            NativeCalendarName :string;
            AbbreviatedMonthGenitiveNames :string[];
            MonthGenitiveNames :string[];
            GetInstance(provider: System.IFormatProvider): System.Globalization.DateTimeFormatInfo;
            GetAllDateTimePatterns(format: System.Char): string[];
            GetFormat(formatType: System.Type): any;
            Clone(): any;
            GetEra(eraName: string): number;
            GetEraName(era: number): string;
            GetAbbreviatedEraName(era: number): string;
            GetAbbreviatedDayName(dayofweek: System.DayOfWeek): string;
            GetShortestDayName(dayOfWeek: System.DayOfWeek): string;
            GetAllDateTimePatterns(): string[];
            GetDayName(dayofweek: System.DayOfWeek): string;
            GetAbbreviatedMonthName(month: number): string;
            GetMonthName(month: number): string;
            ReadOnly(dtfi: System.Globalization.DateTimeFormatInfo): System.Globalization.DateTimeFormatInfo;
            SetAllDateTimePatterns(patterns: string[], format: System.Char): void;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ICustomAttributeProvider
        名前空間:System.Reflection
        完全限定名:System.Reflection.ICustomAttributeProvider
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface ICustomAttributeProvider {
            GetCustomAttributes(attributeType: System.Type, inherit: boolean): any[];
            GetCustomAttributes(inherit: boolean): any[];
            IsDefined(attributeType: System.Type, inherit: boolean): boolean;
        }
    }
}
declare namespace System {
    /**
    名前:RuntimeFieldHandle
    名前空間:System
    完全限定名:System.RuntimeFieldHandle
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface RuntimeFieldHandle {
        Value :System.IntPtr;
        GetHashCode(): number;
        Equals(obj: any): boolean;
        Equals(handle: System.RuntimeFieldHandle): boolean;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:FieldAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.FieldAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface FieldAttributes {
            value__ :number;
            FieldAccessMask :System.Reflection.FieldAttributes;
            PrivateScope :System.Reflection.FieldAttributes;
            Private :System.Reflection.FieldAttributes;
            FamANDAssem :System.Reflection.FieldAttributes;
            Assembly :System.Reflection.FieldAttributes;
            Family :System.Reflection.FieldAttributes;
            FamORAssem :System.Reflection.FieldAttributes;
            Public :System.Reflection.FieldAttributes;
            Static :System.Reflection.FieldAttributes;
            InitOnly :System.Reflection.FieldAttributes;
            Literal :System.Reflection.FieldAttributes;
            NotSerialized :System.Reflection.FieldAttributes;
            SpecialName :System.Reflection.FieldAttributes;
            PinvokeImpl :System.Reflection.FieldAttributes;
            ReservedMask :System.Reflection.FieldAttributes;
            RTSpecialName :System.Reflection.FieldAttributes;
            HasFieldMarshal :System.Reflection.FieldAttributes;
            HasDefault :System.Reflection.FieldAttributes;
            HasFieldRVA :System.Reflection.FieldAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:TypedReference
    名前空間:System
    完全限定名:System.TypedReference
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
    */
    interface TypedReference {
        MakeTypedReference(target: any, flds: System.Reflection.FieldInfo[]): System.TypedReference;
        GetHashCode(): number;
        Equals(o: any): boolean;
        ToObject(value: System.TypedReference): any;
        GetTargetType(value: System.TypedReference): System.Type;
        TargetTypeToken(value: System.TypedReference): System.RuntimeTypeHandle;
        SetTypedReference(target: System.TypedReference, value: any): void;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:EventAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.EventAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface EventAttributes {
            value__ :number;
            None :System.Reflection.EventAttributes;
            SpecialName :System.Reflection.EventAttributes;
            ReservedMask :System.Reflection.EventAttributes;
            RTSpecialName :System.Reflection.EventAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:PropertyAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.PropertyAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface PropertyAttributes {
            value__ :number;
            None :System.Reflection.PropertyAttributes;
            SpecialName :System.Reflection.PropertyAttributes;
            ReservedMask :System.Reflection.PropertyAttributes;
            RTSpecialName :System.Reflection.PropertyAttributes;
            HasDefault :System.Reflection.PropertyAttributes;
            Reserved2 :System.Reflection.PropertyAttributes;
            Reserved3 :System.Reflection.PropertyAttributes;
            Reserved4 :System.Reflection.PropertyAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IComparer
        名前空間:System.Collections
        完全限定名:System.Collections.IComparer
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IComparer {
            Compare(x: any, y: any): number;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IEnumerator
        名前空間:System.Collections
        完全限定名:System.Collections.IEnumerator
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IEnumerator {
            Current :any;
            MoveNext(): boolean;
            Reset(): void;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:CalendarAlgorithmType
        名前空間:System.Globalization
        完全限定名:System.Globalization.CalendarAlgorithmType
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed
        */
        interface CalendarAlgorithmType {
            value__ :number;
            Unknown :System.Globalization.CalendarAlgorithmType;
            SolarCalendar :System.Globalization.CalendarAlgorithmType;
            LunarCalendar :System.Globalization.CalendarAlgorithmType;
            LunisolarCalendar :System.Globalization.CalendarAlgorithmType;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:CalendarWeekRule
        名前空間:System.Globalization
        完全限定名:System.Globalization.CalendarWeekRule
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface CalendarWeekRule {
            value__ :number;
            FirstDay :System.Globalization.CalendarWeekRule;
            FirstFullWeek :System.Globalization.CalendarWeekRule;
            FirstFourDayWeek :System.Globalization.CalendarWeekRule;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:TimeSpanStyles
        名前空間:System.Globalization
        完全限定名:System.Globalization.TimeSpanStyles
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed
        */
        interface TimeSpanStyles {
            value__ :number;
            None :System.Globalization.TimeSpanStyles;
            AssumeNegative :System.Globalization.TimeSpanStyles;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:Void
    名前空間:System
    完全限定名:System.Void
    このメンバを宣言するクラス:
    親クラス:System.ValueType
    属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
    */
    interface Void {
        Equals(obj: any): boolean;
        GetHashCode(): number;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Threading {
        /**
        名前:WaitHandle
        名前空間:System.Threading
        完全限定名:System.Threading.WaitHandle
        このメンバを宣言するクラス:
        親クラス:System.MarshalByRefObject
        属性:AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
        */
        interface WaitHandle {
            WaitTimeout :number;
            Handle :System.IntPtr;
            SafeWaitHandle :Microsoft.Win32.SafeHandles.SafeWaitHandle;
            WaitOne(millisecondsTimeout: number, exitContext: boolean): boolean;
            WaitOne(timeout: System.TimeSpan, exitContext: boolean): boolean;
            WaitOne(): boolean;
            WaitOne(millisecondsTimeout: number): boolean;
            WaitOne(timeout: System.TimeSpan): boolean;
            WaitAll(waitHandles: System.Threading.WaitHandle[], millisecondsTimeout: number, exitContext: boolean): boolean;
            WaitAll(waitHandles: System.Threading.WaitHandle[], timeout: System.TimeSpan, exitContext: boolean): boolean;
            WaitAll(waitHandles: System.Threading.WaitHandle[]): boolean;
            WaitAll(waitHandles: System.Threading.WaitHandle[], millisecondsTimeout: number): boolean;
            WaitAll(waitHandles: System.Threading.WaitHandle[], timeout: System.TimeSpan): boolean;
            WaitAny(waitHandles: System.Threading.WaitHandle[], millisecondsTimeout: number, exitContext: boolean): number;
            WaitAny(waitHandles: System.Threading.WaitHandle[], timeout: System.TimeSpan, exitContext: boolean): number;
            WaitAny(waitHandles: System.Threading.WaitHandle[], timeout: System.TimeSpan): number;
            WaitAny(waitHandles: System.Threading.WaitHandle[]): number;
            WaitAny(waitHandles: System.Threading.WaitHandle[], millisecondsTimeout: number): number;
            SignalAndWait(toSignal: System.Threading.WaitHandle, toWaitOn: System.Threading.WaitHandle): boolean;
            SignalAndWait(toSignal: System.Threading.WaitHandle, toWaitOn: System.Threading.WaitHandle, timeout: System.TimeSpan, exitContext: boolean): boolean;
            SignalAndWait(toSignal: System.Threading.WaitHandle, toWaitOn: System.Threading.WaitHandle, millisecondsTimeout: number, exitContext: boolean): boolean;
            Close(): void;
            Dispose(): void;
            GetLifetimeService(): any;
            InitializeLifetimeService(): any;
            CreateObjRef(requestedType: System.Type): System.Runtime.Remoting.ObjRef;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ParameterAttributes
        名前空間:System.Reflection
        完全限定名:System.Reflection.ParameterAttributes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface ParameterAttributes {
            value__ :number;
            None :System.Reflection.ParameterAttributes;
            In :System.Reflection.ParameterAttributes;
            Out :System.Reflection.ParameterAttributes;
            Lcid :System.Reflection.ParameterAttributes;
            Retval :System.Reflection.ParameterAttributes;
            Optional :System.Reflection.ParameterAttributes;
            ReservedMask :System.Reflection.ParameterAttributes;
            HasDefault :System.Reflection.ParameterAttributes;
            HasFieldMarshal :System.Reflection.ParameterAttributes;
            Reserved3 :System.Reflection.ParameterAttributes;
            Reserved4 :System.Reflection.ParameterAttributes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Security {
        /**
        名前:SecureString
        名前空間:System.Security
        完全限定名:System.Security.SecureString
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Sealed
        */
        interface SecureString {
            new();
            new(value: System.Char, length: number);
            Length :number;
            AppendChar(c: System.Char): void;
            Clear(): void;
            Copy(): System.Security.SecureString;
            Dispose(): void;
            InsertAt(index: number, c: System.Char): void;
            IsReadOnly(): boolean;
            MakeReadOnly(): void;
            RemoveAt(index: number): void;
            SetAt(index: number, c: System.Char): void;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Cryptography {
            namespace X509Certificates {
                /**
                名前:X509KeyStorageFlags
                名前空間:System.Security.Cryptography.X509Certificates
                完全限定名:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
                このメンバを宣言するクラス:
                親クラス:System.Enum
                属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
                */
                interface X509KeyStorageFlags {
                    value__ :number;
                    DefaultKeySet :System.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
                    UserKeySet :System.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
                    MachineKeySet :System.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
                    Exportable :System.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
                    UserProtected :System.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
                    PersistKeySet :System.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
                    Equals(obj: any): boolean;
                    GetHashCode(): number;
                    ToString(): string;
                    ToString(format: string, provider: System.IFormatProvider): string;
                    CompareTo(target: any): number;
                    ToString(format: string): string;
                    ToString(provider: System.IFormatProvider): string;
                    HasFlag(flag: System.Enum): boolean;
                    GetTypeCode(): System.TypeCode;
                    GetType(): System.Type;
                }
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Cryptography {
            namespace X509Certificates {
                /**
                名前:X509ContentType
                名前空間:System.Security.Cryptography.X509Certificates
                完全限定名:System.Security.Cryptography.X509Certificates.X509ContentType
                このメンバを宣言するクラス:
                親クラス:System.Enum
                属性:AutoLayout, AnsiClass, Class, Public, Sealed
                */
                interface X509ContentType {
                    value__ :number;
                    Unknown :System.Security.Cryptography.X509Certificates.X509ContentType;
                    Cert :System.Security.Cryptography.X509Certificates.X509ContentType;
                    SerializedCert :System.Security.Cryptography.X509Certificates.X509ContentType;
                    Pfx :System.Security.Cryptography.X509Certificates.X509ContentType;
                    Pkcs12 :System.Security.Cryptography.X509Certificates.X509ContentType;
                    SerializedStore :System.Security.Cryptography.X509Certificates.X509ContentType;
                    Pkcs7 :System.Security.Cryptography.X509Certificates.X509ContentType;
                    Authenticode :System.Security.Cryptography.X509Certificates.X509ContentType;
                    Equals(obj: any): boolean;
                    GetHashCode(): number;
                    ToString(): string;
                    ToString(format: string, provider: System.IFormatProvider): string;
                    CompareTo(target: any): number;
                    ToString(format: string): string;
                    ToString(provider: System.IFormatProvider): string;
                    HasFlag(flag: System.Enum): boolean;
                    GetTypeCode(): System.TypeCode;
                    GetType(): System.Type;
                }
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Policy {
            /**
            名前:EvidenceBase
            名前空間:System.Security.Policy
            完全限定名:System.Security.Policy.EvidenceBase
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, HasSecurity, BeforeFieldInit
            */
            interface EvidenceBase {
                Clone(): System.Security.Policy.EvidenceBase;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Permissions {
            /**
            名前:PermissionState
            名前空間:System.Security.Permissions
            完全限定名:System.Security.Permissions.PermissionState
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface PermissionState {
                value__ :number;
                Unrestricted :System.Security.Permissions.PermissionState;
                None :System.Security.Permissions.PermissionState;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        /**
        名前:IPermission
        名前空間:System.Security
        完全限定名:System.Security.IPermission
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IPermission {
            Copy(): System.Security.IPermission;
            Intersect(target: System.Security.IPermission): System.Security.IPermission;
            Union(target: System.Security.IPermission): System.Security.IPermission;
            IsSubsetOf(target: System.Security.IPermission): boolean;
            Demand(): void;
        }
    }
}
declare namespace System {
    namespace Security {
        /**
        名前:SecurityElement
        名前空間:System.Security
        完全限定名:System.Security.SecurityElement
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
        */
        interface SecurityElement {
            new(tag: string);
            new(tag: string, text: string);
            Tag :string;
            Attributes :System.Collections.Hashtable;
            Text :string;
            Children :System.Collections.ArrayList;
            AddAttribute(name: string, value: string): void;
            Attribute(name: string): string;
            FromString(xml: string): System.Security.SecurityElement;
            AddChild(child: System.Security.SecurityElement): void;
            Equal(other: System.Security.SecurityElement): boolean;
            Copy(): System.Security.SecurityElement;
            IsValidTag(tag: string): boolean;
            IsValidText(text: string): boolean;
            IsValidAttributeName(name: string): boolean;
            IsValidAttributeValue(value: string): boolean;
            Escape(str: string): string;
            ToString(): string;
            SearchForChildByTag(tag: string): System.Security.SecurityElement;
            SearchForTextOfTag(tag: string): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ProcessorArchitecture
        名前空間:System.Reflection
        完全限定名:System.Reflection.ProcessorArchitecture
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface ProcessorArchitecture {
            value__ :number;
            None :System.Reflection.ProcessorArchitecture;
            MSIL :System.Reflection.ProcessorArchitecture;
            X86 :System.Reflection.ProcessorArchitecture;
            IA64 :System.Reflection.ProcessorArchitecture;
            Amd64 :System.Reflection.ProcessorArchitecture;
            Arm :System.Reflection.ProcessorArchitecture;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:AssemblyContentType
        名前空間:System.Reflection
        完全限定名:System.Reflection.AssemblyContentType
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface AssemblyContentType {
            value__ :number;
            Default :System.Reflection.AssemblyContentType;
            WindowsRuntime :System.Reflection.AssemblyContentType;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:AssemblyNameFlags
        名前空間:System.Reflection
        完全限定名:System.Reflection.AssemblyNameFlags
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface AssemblyNameFlags {
            value__ :number;
            None :System.Reflection.AssemblyNameFlags;
            PublicKey :System.Reflection.AssemblyNameFlags;
            EnableJITcompileOptimizer :System.Reflection.AssemblyNameFlags;
            EnableJITcompileTracking :System.Reflection.AssemblyNameFlags;
            Retargetable :System.Reflection.AssemblyNameFlags;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Configuration {
        namespace Assemblies {
            /**
            名前:AssemblyVersionCompatibility
            名前空間:System.Configuration.Assemblies
            完全限定名:System.Configuration.Assemblies.AssemblyVersionCompatibility
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface AssemblyVersionCompatibility {
                value__ :number;
                SameMachine :System.Configuration.Assemblies.AssemblyVersionCompatibility;
                SameProcess :System.Configuration.Assemblies.AssemblyVersionCompatibility;
                SameDomain :System.Configuration.Assemblies.AssemblyVersionCompatibility;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:StrongNameKeyPair
        名前空間:System.Reflection
        完全限定名:System.Reflection.StrongNameKeyPair
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface StrongNameKeyPair {
            new(keyPairFile: System.IO.FileStream);
            new(keyPairArray: System.Byte[]);
            new(keyPairContainer: string);
            PublicKey :System.Byte[];
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Threading {
        namespace Tasks {
            /**
            名前:Task
            名前空間:System.Threading.Tasks
            完全限定名:System.Threading.Tasks.Task
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
            */
            interface Task {
                new(action: System.Action);
                new(action: System.Action, cancellationToken: System.Threading.CancellationToken);
                new(action: System.Action, creationOptions: System.Threading.Tasks.TaskCreationOptions);
                new(action: System.Action, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions);
                new(action: any, state: any);
                new(action: any, state: any, cancellationToken: System.Threading.CancellationToken);
                new(action: any, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions);
                new(action: any, state: any, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions);
                Id :number;
                CurrentId :any;
                Exception :System.AggregateException;
                Status :System.Threading.Tasks.TaskStatus;
                IsCanceled :boolean;
                IsCompleted :boolean;
                CreationOptions :System.Threading.Tasks.TaskCreationOptions;
                AsyncState :any;
                Factory :System.Threading.Tasks.TaskFactory;
                CompletedTask :System.Threading.Tasks.Task;
                IsFaulted :boolean;
                Start(): void;
                Start(scheduler: System.Threading.Tasks.TaskScheduler): void;
                RunSynchronously(): void;
                RunSynchronously(scheduler: System.Threading.Tasks.TaskScheduler): void;
                Dispose(): void;
                GetAwaiter(): System.Runtime.CompilerServices.TaskAwaiter;
                ConfigureAwait(continueOnCapturedContext: boolean): System.Runtime.CompilerServices.ConfiguredTaskAwaitable;
                Yield(): System.Runtime.CompilerServices.YieldAwaitable;
                Wait(): void;
                Wait(timeout: System.TimeSpan): boolean;
                Wait(cancellationToken: System.Threading.CancellationToken): void;
                Wait(millisecondsTimeout: number): boolean;
                Wait(millisecondsTimeout: number, cancellationToken: System.Threading.CancellationToken): boolean;
                ContinueWith<D>(continuationAction: any): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, state: any): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, state: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, state: any, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, state: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): System.Threading.Tasks.Task;
                ContinueWith<D>(continuationAction: any, state: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWith<D, TResult>(continuationFunction: any): any;
                ContinueWith<D, TResult>(continuationFunction: any, cancellationToken: System.Threading.CancellationToken): any;
                ContinueWith<D, TResult>(continuationFunction: any, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWith<D, TResult>(continuationFunction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): any;
                ContinueWith<D, TResult>(continuationFunction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWith<D, TResult>(continuationFunction: any, state: any): any;
                ContinueWith<D, TResult>(continuationFunction: any, state: any, cancellationToken: System.Threading.CancellationToken): any;
                ContinueWith<D, TResult>(continuationFunction: any, state: any, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWith<D, TResult>(continuationFunction: any, state: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): any;
                ContinueWith<D, TResult>(continuationFunction: any, state: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                WaitAll(tasks: System.Threading.Tasks.Task[]): void;
                WaitAll(tasks: System.Threading.Tasks.Task[], timeout: System.TimeSpan): boolean;
                WaitAll(tasks: System.Threading.Tasks.Task[], millisecondsTimeout: number): boolean;
                WaitAll(tasks: System.Threading.Tasks.Task[], cancellationToken: System.Threading.CancellationToken): void;
                WaitAll(tasks: System.Threading.Tasks.Task[], millisecondsTimeout: number, cancellationToken: System.Threading.CancellationToken): boolean;
                WaitAny(tasks: System.Threading.Tasks.Task[]): number;
                WaitAny(tasks: System.Threading.Tasks.Task[], timeout: System.TimeSpan): number;
                WaitAny(tasks: System.Threading.Tasks.Task[], cancellationToken: System.Threading.CancellationToken): number;
                WaitAny(tasks: System.Threading.Tasks.Task[], millisecondsTimeout: number): number;
                WaitAny(tasks: System.Threading.Tasks.Task[], millisecondsTimeout: number, cancellationToken: System.Threading.CancellationToken): number;
                FromResult<TResult>(result: TResult): any;
                FromException(exception: System.Exception): System.Threading.Tasks.Task;
                FromException<TResult>(exception: System.Exception): any;
                Run(action: System.Action): System.Threading.Tasks.Task;
                Run(action: System.Action, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                Run<TResult>(_function: any): any;
                Run<TResult>(_function: any, cancellationToken: System.Threading.CancellationToken): any;
                Run<D>(_function: any): System.Threading.Tasks.Task;
                Run<D>(_function: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                Run<D, TResult>(_function: any): any;
                Run<D, TResult>(_function: any, cancellationToken: System.Threading.CancellationToken): any;
                Delay(delay: System.TimeSpan): System.Threading.Tasks.Task;
                Delay(delay: System.TimeSpan, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                Delay(millisecondsDelay: number): System.Threading.Tasks.Task;
                Delay(millisecondsDelay: number, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                WhenAll<D>(tasks: any): System.Threading.Tasks.Task;
                WhenAll(tasks: System.Threading.Tasks.Task[]): System.Threading.Tasks.Task;
                WhenAll<D, TResult>(tasks: any): any;
                WhenAll<TResult>(tasks: any): any;
                WhenAny(tasks: System.Threading.Tasks.Task[]): any;
                WhenAny<D>(tasks: any): any;
                WhenAny<TResult>(tasks: any): any;
                WhenAny<D, TResult>(tasks: any): any;
                FromCanceled(cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                FromCanceled<TResult>(cancellationToken: System.Threading.CancellationToken): any;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Threading {
        /**
        名前:CancellationToken
        名前空間:System.Threading
        完全限定名:System.Threading.CancellationToken
        このメンバを宣言するクラス:
        親クラス:System.ValueType
        属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
        */
        interface CancellationToken {
            new(canceled: boolean);
            None :System.Threading.CancellationToken;
            IsCancellationRequested :boolean;
            CanBeCanceled :boolean;
            WaitHandle :System.Threading.WaitHandle;
            Register(callback: System.Action): System.Threading.CancellationTokenRegistration;
            Register(callback: System.Action, useSynchronizationContext: boolean): System.Threading.CancellationTokenRegistration;
            Register<D>(callback: any, state: any): System.Threading.CancellationTokenRegistration;
            Register<D>(callback: any, state: any, useSynchronizationContext: boolean): System.Threading.CancellationTokenRegistration;
            Equals(other: System.Threading.CancellationToken): boolean;
            Equals(other: any): boolean;
            GetHashCode(): number;
            ThrowIfCancellationRequested(): void;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:SeekOrigin
        名前空間:System.IO
        完全限定名:System.IO.SeekOrigin
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface SeekOrigin {
            value__ :number;
            Begin :System.IO.SeekOrigin;
            Current :System.IO.SeekOrigin;
            End :System.IO.SeekOrigin;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            /**
            名前:ObjRef
            名前空間:System.Runtime.Remoting
            完全限定名:System.Runtime.Remoting.ObjRef
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
            */
            interface ObjRef {
                new(o: System.MarshalByRefObject, requestedType: System.Type);
                new();
                URI :string;
                TypeInfo :System.Runtime.Remoting.IRemotingTypeInfo;
                EnvoyInfo :System.Runtime.Remoting.IEnvoyInfo;
                ChannelInfo :System.Runtime.Remoting.IChannelInfo;
                GetRealObject(context: System.Runtime.Serialization.StreamingContext): any;
                GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
                IsFromThisProcess(): boolean;
                IsFromThisAppDomain(): boolean;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:FileMode
        名前空間:System.IO
        完全限定名:System.IO.FileMode
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface FileMode {
            value__ :number;
            CreateNew :System.IO.FileMode;
            Create :System.IO.FileMode;
            Open :System.IO.FileMode;
            OpenOrCreate :System.IO.FileMode;
            Truncate :System.IO.FileMode;
            Append :System.IO.FileMode;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:FileAccess
        名前空間:System.IO
        完全限定名:System.IO.FileAccess
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface FileAccess {
            value__ :number;
            Read :System.IO.FileAccess;
            Write :System.IO.FileAccess;
            ReadWrite :System.IO.FileAccess;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:FileShare
        名前空間:System.IO
        完全限定名:System.IO.FileShare
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface FileShare {
            value__ :number;
            None :System.IO.FileShare;
            Read :System.IO.FileShare;
            Write :System.IO.FileShare;
            ReadWrite :System.IO.FileShare;
            Delete :System.IO.FileShare;
            Inheritable :System.IO.FileShare;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace IO {
        /**
        名前:FileOptions
        名前空間:System.IO
        完全限定名:System.IO.FileOptions
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface FileOptions {
            value__ :number;
            None :System.IO.FileOptions;
            WriteThrough :System.IO.FileOptions;
            Asynchronous :System.IO.FileOptions;
            RandomAccess :System.IO.FileOptions;
            DeleteOnClose :System.IO.FileOptions;
            SequentialScan :System.IO.FileOptions;
            Encrypted :System.IO.FileOptions;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:FileSystemRights
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.FileSystemRights
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface FileSystemRights {
                value__ :number;
                ReadData :System.Security.AccessControl.FileSystemRights;
                ListDirectory :System.Security.AccessControl.FileSystemRights;
                WriteData :System.Security.AccessControl.FileSystemRights;
                CreateFiles :System.Security.AccessControl.FileSystemRights;
                AppendData :System.Security.AccessControl.FileSystemRights;
                CreateDirectories :System.Security.AccessControl.FileSystemRights;
                ReadExtendedAttributes :System.Security.AccessControl.FileSystemRights;
                WriteExtendedAttributes :System.Security.AccessControl.FileSystemRights;
                ExecuteFile :System.Security.AccessControl.FileSystemRights;
                Traverse :System.Security.AccessControl.FileSystemRights;
                DeleteSubdirectoriesAndFiles :System.Security.AccessControl.FileSystemRights;
                ReadAttributes :System.Security.AccessControl.FileSystemRights;
                WriteAttributes :System.Security.AccessControl.FileSystemRights;
                Delete :System.Security.AccessControl.FileSystemRights;
                ReadPermissions :System.Security.AccessControl.FileSystemRights;
                ChangePermissions :System.Security.AccessControl.FileSystemRights;
                TakeOwnership :System.Security.AccessControl.FileSystemRights;
                Synchronize :System.Security.AccessControl.FileSystemRights;
                FullControl :System.Security.AccessControl.FileSystemRights;
                Read :System.Security.AccessControl.FileSystemRights;
                ReadAndExecute :System.Security.AccessControl.FileSystemRights;
                Write :System.Security.AccessControl.FileSystemRights;
                Modify :System.Security.AccessControl.FileSystemRights;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:FileSecurity
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.FileSecurity
            このメンバを宣言するクラス:
            親クラス:System.Security.AccessControl.FileSystemSecurity
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface FileSecurity {
                new();
                new(fileName: string, includeSections: System.Security.AccessControl.AccessControlSections);
                AccessRightType :System.Type;
                AccessRuleType :System.Type;
                AuditRuleType :System.Type;
                AreAccessRulesProtected :boolean;
                AreAuditRulesProtected :boolean;
                AreAccessRulesCanonical :boolean;
                AreAuditRulesCanonical :boolean;
                AccessRuleFactory(identityReference: System.Security.Principal.IdentityReference, accessMask: number, isInherited: boolean, inheritanceFlags: System.Security.AccessControl.InheritanceFlags, propagationFlags: System.Security.AccessControl.PropagationFlags, type: System.Security.AccessControl.AccessControlType): System.Security.AccessControl.AccessRule;
                AuditRuleFactory(identityReference: System.Security.Principal.IdentityReference, accessMask: number, isInherited: boolean, inheritanceFlags: System.Security.AccessControl.InheritanceFlags, propagationFlags: System.Security.AccessControl.PropagationFlags, flags: System.Security.AccessControl.AuditFlags): System.Security.AccessControl.AuditRule;
                AddAccessRule(rule: System.Security.AccessControl.FileSystemAccessRule): void;
                SetAccessRule(rule: System.Security.AccessControl.FileSystemAccessRule): void;
                ResetAccessRule(rule: System.Security.AccessControl.FileSystemAccessRule): void;
                RemoveAccessRule(rule: System.Security.AccessControl.FileSystemAccessRule): boolean;
                RemoveAccessRuleAll(rule: System.Security.AccessControl.FileSystemAccessRule): void;
                RemoveAccessRuleSpecific(rule: System.Security.AccessControl.FileSystemAccessRule): void;
                AddAuditRule(rule: System.Security.AccessControl.FileSystemAuditRule): void;
                SetAuditRule(rule: System.Security.AccessControl.FileSystemAuditRule): void;
                RemoveAuditRule(rule: System.Security.AccessControl.FileSystemAuditRule): boolean;
                RemoveAuditRuleAll(rule: System.Security.AccessControl.FileSystemAuditRule): void;
                RemoveAuditRuleSpecific(rule: System.Security.AccessControl.FileSystemAuditRule): void;
                GetAccessRules(includeExplicit: boolean, includeInherited: boolean, targetType: System.Type): System.Security.AccessControl.AuthorizationRuleCollection;
                GetAuditRules(includeExplicit: boolean, includeInherited: boolean, targetType: System.Type): System.Security.AccessControl.AuthorizationRuleCollection;
                GetOwner(targetType: System.Type): System.Security.Principal.IdentityReference;
                SetOwner(identity: System.Security.Principal.IdentityReference): void;
                GetGroup(targetType: System.Type): System.Security.Principal.IdentityReference;
                SetGroup(identity: System.Security.Principal.IdentityReference): void;
                PurgeAccessRules(identity: System.Security.Principal.IdentityReference): void;
                PurgeAuditRules(identity: System.Security.Principal.IdentityReference): void;
                SetAccessRuleProtection(isProtected: boolean, preserveInheritance: boolean): void;
                SetAuditRuleProtection(isProtected: boolean, preserveInheritance: boolean): void;
                GetSecurityDescriptorSddlForm(includeSections: System.Security.AccessControl.AccessControlSections): string;
                SetSecurityDescriptorSddlForm(sddlForm: string): void;
                SetSecurityDescriptorSddlForm(sddlForm: string, includeSections: System.Security.AccessControl.AccessControlSections): void;
                GetSecurityDescriptorBinaryForm(): System.Byte[];
                SetSecurityDescriptorBinaryForm(binaryForm: System.Byte[]): void;
                SetSecurityDescriptorBinaryForm(binaryForm: System.Byte[], includeSections: System.Security.AccessControl.AccessControlSections): void;
                ModifyAccessRule(modification: System.Security.AccessControl.AccessControlModification, rule: System.Security.AccessControl.AccessRule, modified: boolean): boolean;
                ModifyAuditRule(modification: System.Security.AccessControl.AccessControlModification, rule: System.Security.AccessControl.AuditRule, modified: boolean): boolean;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace Microsoft {
    namespace Win32 {
        namespace SafeHandles {
            /**
            名前:SafeFileHandle
            名前空間:Microsoft.Win32.SafeHandles
            完全限定名:Microsoft.Win32.SafeHandles.SafeFileHandle
            このメンバを宣言するクラス:
            親クラス:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface SafeFileHandle {
                new(preexistingHandle: System.IntPtr, ownsHandle: boolean);
                IsInvalid :boolean;
                IsClosed :boolean;
                DangerousGetHandle(): System.IntPtr;
                Close(): void;
                Dispose(): void;
                SetHandleAsInvalid(): void;
                DangerousAddRef(success: boolean): void;
                DangerousRelease(): void;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Reflection {
        /**
        名前:ResourceLocation
        名前空間:System.Reflection
        完全限定名:System.Reflection.ResourceLocation
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface ResourceLocation {
            value__ :number;
            Embedded :System.Reflection.ResourceLocation;
            ContainedInAnotherAssembly :System.Reflection.ResourceLocation;
            ContainedInManifestFile :System.Reflection.ResourceLocation;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:SortVersion
        名前空間:System.Globalization
        完全限定名:System.Globalization.SortVersion
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable, BeforeFieldInit
        */
        interface SortVersion {
            new(fullVersion: number, sortId: System.Guid);
            FullVersion :number;
            SortId :System.Guid;
            Equals(obj: any): boolean;
            Equals(other: System.Globalization.SortVersion): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:CompareOptions
        名前空間:System.Globalization
        完全限定名:System.Globalization.CompareOptions
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface CompareOptions {
            value__ :number;
            None :System.Globalization.CompareOptions;
            IgnoreCase :System.Globalization.CompareOptions;
            IgnoreNonSpace :System.Globalization.CompareOptions;
            IgnoreSymbols :System.Globalization.CompareOptions;
            IgnoreKanaType :System.Globalization.CompareOptions;
            IgnoreWidth :System.Globalization.CompareOptions;
            OrdinalIgnoreCase :System.Globalization.CompareOptions;
            StringSort :System.Globalization.CompareOptions;
            Ordinal :System.Globalization.CompareOptions;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:SortKey
        名前空間:System.Globalization
        完全限定名:System.Globalization.SortKey
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface SortKey {
            OriginalString :string;
            KeyData :System.Byte[];
            Compare(sortkey1: System.Globalization.SortKey, sortkey2: System.Globalization.SortKey): number;
            Equals(value: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Globalization {
        /**
        名前:DigitShapes
        名前空間:System.Globalization
        完全限定名:System.Globalization.DigitShapes
        このメンバを宣言するクラス:
        親クラス:System.Enum
        属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
        */
        interface DigitShapes {
            value__ :number;
            Context :System.Globalization.DigitShapes;
            None :System.Globalization.DigitShapes;
            NativeNational :System.Globalization.DigitShapes;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            ToString(format: string, provider: System.IFormatProvider): string;
            CompareTo(target: any): number;
            ToString(format: string): string;
            ToString(provider: System.IFormatProvider): string;
            HasFlag(flag: System.Enum): boolean;
            GetTypeCode(): System.TypeCode;
            GetType(): System.Type;
        }
    }
}
declare namespace Microsoft {
    namespace Win32 {
        namespace SafeHandles {
            /**
            名前:SafeWaitHandle
            名前空間:Microsoft.Win32.SafeHandles
            完全限定名:Microsoft.Win32.SafeHandles.SafeWaitHandle
            このメンバを宣言するクラス:
            親クラス:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface SafeWaitHandle {
                new(existingHandle: System.IntPtr, ownsHandle: boolean);
                IsInvalid :boolean;
                IsClosed :boolean;
                DangerousGetHandle(): System.IntPtr;
                Close(): void;
                Dispose(): void;
                SetHandleAsInvalid(): void;
                DangerousAddRef(success: boolean): void;
                DangerousRelease(): void;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:Hashtable
        名前空間:System.Collections
        完全限定名:System.Collections.Hashtable
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface Hashtable {
            new();
            new(capacity: number);
            new(capacity: number, loadFactor: number);
            new(capacity: number, loadFactor: number, hcp: System.Collections.IHashCodeProvider, comparer: System.Collections.IComparer);
            new(capacity: number, loadFactor: number, equalityComparer: System.Collections.IEqualityComparer);
            new(hcp: System.Collections.IHashCodeProvider, comparer: System.Collections.IComparer);
            new(equalityComparer: System.Collections.IEqualityComparer);
            new(capacity: number, hcp: System.Collections.IHashCodeProvider, comparer: System.Collections.IComparer);
            new(capacity: number, equalityComparer: System.Collections.IEqualityComparer);
            new(d: System.Collections.IDictionary);
            new(d: System.Collections.IDictionary, loadFactor: number);
            new(d: System.Collections.IDictionary, hcp: System.Collections.IHashCodeProvider, comparer: System.Collections.IComparer);
            new(d: System.Collections.IDictionary, equalityComparer: System.Collections.IEqualityComparer);
            new(d: System.Collections.IDictionary, loadFactor: number, hcp: System.Collections.IHashCodeProvider, comparer: System.Collections.IComparer);
            new(d: System.Collections.IDictionary, loadFactor: number, equalityComparer: System.Collections.IEqualityComparer);
            Item :any;
            IsReadOnly :boolean;
            IsFixedSize :boolean;
            IsSynchronized :boolean;
            Keys :System.Collections.ICollection;
            Values :System.Collections.ICollection;
            SyncRoot :any;
            Count :number;
            Add(key: any, value: any): void;
            Clear(): void;
            Clone(): any;
            Contains(key: any): boolean;
            ContainsKey(key: any): boolean;
            ContainsValue(value: any): boolean;
            CopyTo(array: System.Array, arrayIndex: number): void;
            [key: any]: System.Object;
            GetEnumerator(): System.Collections.IDictionaryEnumerator;
            Remove(key: any): void;
            Synchronized(table: System.Collections.Hashtable): System.Collections.Hashtable;
            GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
            OnDeserialization(sender: any): void;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:ArrayList
        名前空間:System.Collections
        完全限定名:System.Collections.ArrayList
        このメンバを宣言するクラス:
        親クラス:System.Object
        属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
        */
        interface ArrayList {
            new();
            new(capacity: number);
            new(c: System.Collections.ICollection);
            Capacity :number;
            Count :number;
            IsFixedSize :boolean;
            IsReadOnly :boolean;
            IsSynchronized :boolean;
            SyncRoot :any;
            Item :any;
            [index: number]: System.Object;
            Adapter(list: System.Collections.IList): System.Collections.ArrayList;
            Add(value: any): number;
            AddRange(c: System.Collections.ICollection): void;
            BinarySearch(index: number, count: number, value: any, comparer: System.Collections.IComparer): number;
            BinarySearch(value: any): number;
            BinarySearch(value: any, comparer: System.Collections.IComparer): number;
            Clear(): void;
            Clone(): any;
            Contains(item: any): boolean;
            CopyTo(array: System.Array): void;
            CopyTo(array: System.Array, arrayIndex: number): void;
            CopyTo(index: number, array: System.Array, arrayIndex: number, count: number): void;
            FixedSize(list: System.Collections.IList): System.Collections.IList;
            FixedSize(list: System.Collections.ArrayList): System.Collections.ArrayList;
            GetEnumerator(): System.Collections.IEnumerator;
            GetEnumerator(index: number, count: number): System.Collections.IEnumerator;
            IndexOf(value: any): number;
            IndexOf(value: any, startIndex: number): number;
            IndexOf(value: any, startIndex: number, count: number): number;
            Insert(index: number, value: any): void;
            InsertRange(index: number, c: System.Collections.ICollection): void;
            LastIndexOf(value: any): number;
            LastIndexOf(value: any, startIndex: number): number;
            LastIndexOf(value: any, startIndex: number, count: number): number;
            ReadOnly(list: System.Collections.IList): System.Collections.IList;
            ReadOnly(list: System.Collections.ArrayList): System.Collections.ArrayList;
            Remove(obj: any): void;
            RemoveAt(index: number): void;
            RemoveRange(index: number, count: number): void;
            Repeat(value: any, count: number): System.Collections.ArrayList;
            Reverse(): void;
            Reverse(index: number, count: number): void;
            SetRange(index: number, c: System.Collections.ICollection): void;
            GetRange(index: number, count: number): System.Collections.ArrayList;
            Sort(): void;
            Sort(comparer: System.Collections.IComparer): void;
            Sort(index: number, count: number, comparer: System.Collections.IComparer): void;
            Synchronized(list: System.Collections.IList): System.Collections.IList;
            Synchronized(list: System.Collections.ArrayList): System.Collections.ArrayList;
            ToArray(): any[];
            ToArray(type: System.Type): System.Array;
            TrimToSize(): void;
            ToString(): string;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:Action
    名前空間:System
    完全限定名:System.Action
    このメンバを宣言するクラス:
    親クラス:System.MulticastDelegate
    属性:AutoLayout, AnsiClass, Class, Public, Sealed
    */
    interface Action {
        new(object: any, method: System.IntPtr);
        Method :System.Reflection.MethodInfo;
        Target :any;
        Invoke(): void;
        BeginInvoke(callback: System.AsyncCallback, object: any): System.IAsyncResult;
        EndInvoke(result: System.IAsyncResult): void;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        Equals(obj: any): boolean;
        GetInvocationList(): System.Delegate[];
        GetHashCode(): number;
        DynamicInvoke(args: any[]): any;
        Clone(): any;
        ToString(): string;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Threading {
        namespace Tasks {
            /**
            名前:TaskCreationOptions
            名前空間:System.Threading.Tasks
            完全限定名:System.Threading.Tasks.TaskCreationOptions
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface TaskCreationOptions {
                value__ :number;
                None :System.Threading.Tasks.TaskCreationOptions;
                PreferFairness :System.Threading.Tasks.TaskCreationOptions;
                LongRunning :System.Threading.Tasks.TaskCreationOptions;
                AttachedToParent :System.Threading.Tasks.TaskCreationOptions;
                DenyChildAttach :System.Threading.Tasks.TaskCreationOptions;
                HideScheduler :System.Threading.Tasks.TaskCreationOptions;
                RunContinuationsAsynchronously :System.Threading.Tasks.TaskCreationOptions;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:AggregateException
    名前空間:System
    完全限定名:System.AggregateException
    このメンバを宣言するクラス:
    親クラス:System.Exception
    属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
    */
    interface AggregateException {
        new();
        new(message: string);
        new(message: string, innerException: System.Exception);
        new(innerExceptions: any);
        new(innerExceptions: System.Exception[]);
        new(message: string, innerExceptions: any);
        new(message: string, innerExceptions: System.Exception[]);
        InnerExceptions :any;
        Message :string;
        Data :System.Collections.IDictionary;
        InnerException :System.Exception;
        TargetSite :System.Reflection.MethodBase;
        StackTrace :string;
        HelpLink :string;
        Source :string;
        HResult :number;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        GetBaseException(): System.Exception;
        Handle<D>(predicate: any): void;
        Flatten(): System.AggregateException;
        ToString(): string;
        GetType(): System.Type;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Threading {
        namespace Tasks {
            /**
            名前:TaskStatus
            名前空間:System.Threading.Tasks
            完全限定名:System.Threading.Tasks.TaskStatus
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface TaskStatus {
                value__ :number;
                Created :System.Threading.Tasks.TaskStatus;
                WaitingForActivation :System.Threading.Tasks.TaskStatus;
                WaitingToRun :System.Threading.Tasks.TaskStatus;
                Running :System.Threading.Tasks.TaskStatus;
                WaitingForChildrenToComplete :System.Threading.Tasks.TaskStatus;
                RanToCompletion :System.Threading.Tasks.TaskStatus;
                Canceled :System.Threading.Tasks.TaskStatus;
                Faulted :System.Threading.Tasks.TaskStatus;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Threading {
        namespace Tasks {
            /**
            名前:TaskFactory
            名前空間:System.Threading.Tasks
            完全限定名:System.Threading.Tasks.TaskFactory
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
            */
            interface TaskFactory {
                new();
                new(cancellationToken: System.Threading.CancellationToken);
                new(scheduler: System.Threading.Tasks.TaskScheduler);
                new(creationOptions: System.Threading.Tasks.TaskCreationOptions, continuationOptions: System.Threading.Tasks.TaskContinuationOptions);
                new(cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler);
                CancellationToken :System.Threading.CancellationToken;
                Scheduler :System.Threading.Tasks.TaskScheduler;
                CreationOptions :System.Threading.Tasks.TaskCreationOptions;
                ContinuationOptions :System.Threading.Tasks.TaskContinuationOptions;
                StartNew<D>(action: any, state: any): System.Threading.Tasks.Task;
                StartNew(action: System.Action): System.Threading.Tasks.Task;
                StartNew(action: System.Action, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                StartNew(action: System.Action, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                StartNew(action: System.Action, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                StartNew<D>(action: any, state: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                StartNew<D>(action: any, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                StartNew<D>(action: any, state: any, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                StartNew<TResult>(_function: any): any;
                StartNew<TResult>(_function: any, cancellationToken: System.Threading.CancellationToken): any;
                StartNew<TResult>(_function: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                StartNew<TResult>(_function: any, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                StartNew<D, TResult>(_function: any, state: any): any;
                StartNew<D, TResult>(_function: any, state: any, cancellationToken: System.Threading.CancellationToken): any;
                StartNew<D, TResult>(_function: any, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                StartNew<D, TResult>(_function: any, state: any, cancellationToken: System.Threading.CancellationToken, creationOptions: System.Threading.Tasks.TaskCreationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                FromAsync<D>(asyncResult: System.IAsyncResult, endMethod: any): System.Threading.Tasks.Task;
                FromAsync<D>(asyncResult: System.IAsyncResult, endMethod: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                FromAsync<D>(asyncResult: System.IAsyncResult, endMethod: any, creationOptions: System.Threading.Tasks.TaskCreationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                FromAsync<D>(beginMethod: any, endMethod: any, state: any): System.Threading.Tasks.Task;
                FromAsync<D>(beginMethod: any, endMethod: any, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                FromAsync<TArg1, D>(beginMethod: any, endMethod: any, arg1: TArg1, state: any): System.Threading.Tasks.Task;
                FromAsync<TArg1, D>(beginMethod: any, endMethod: any, arg1: TArg1, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                FromAsync<TArg1, TArg2, D>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, state: any): System.Threading.Tasks.Task;
                FromAsync<TArg1, TArg2, D>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                FromAsync<TArg1, TArg2, TArg3, D>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: any): System.Threading.Tasks.Task;
                FromAsync<TArg1, TArg2, TArg3, D>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): System.Threading.Tasks.Task;
                FromAsync<TResult, D>(asyncResult: System.IAsyncResult, endMethod: any): any;
                FromAsync<TResult, D>(asyncResult: System.IAsyncResult, endMethod: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                FromAsync<TResult, D>(asyncResult: System.IAsyncResult, endMethod: any, creationOptions: System.Threading.Tasks.TaskCreationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                FromAsync<D, TResult>(beginMethod: any, endMethod: any, state: any): any;
                FromAsync<D, TResult>(beginMethod: any, endMethod: any, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                FromAsync<TArg1, D, TResult>(beginMethod: any, endMethod: any, arg1: TArg1, state: any): any;
                FromAsync<TArg1, D, TResult>(beginMethod: any, endMethod: any, arg1: TArg1, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                FromAsync<TArg1, TArg2, D, TResult>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, state: any): any;
                FromAsync<TArg1, TArg2, D, TResult>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                FromAsync<TArg1, TArg2, TArg3, D, TResult>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: any): any;
                FromAsync<TArg1, TArg2, TArg3, D, TResult>(beginMethod: any, endMethod: any, arg1: TArg1, arg2: TArg2, arg3: TArg3, state: any, creationOptions: System.Threading.Tasks.TaskCreationOptions): any;
                ContinueWhenAll<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any): System.Threading.Tasks.Task;
                ContinueWhenAll<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                ContinueWhenAll<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): System.Threading.Tasks.Task;
                ContinueWhenAll<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWhenAll<TAntecedentResult, D>(tasks: any, continuationAction: any): System.Threading.Tasks.Task;
                ContinueWhenAll<TAntecedentResult, D>(tasks: any, continuationAction: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                ContinueWhenAll<TAntecedentResult, D>(tasks: any, continuationAction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): System.Threading.Tasks.Task;
                ContinueWhenAll<TAntecedentResult, D>(tasks: any, continuationAction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWhenAll<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any): any;
                ContinueWhenAll<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any, cancellationToken: System.Threading.CancellationToken): any;
                ContinueWhenAll<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): any;
                ContinueWhenAll<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWhenAll<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any): any;
                ContinueWhenAll<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any, cancellationToken: System.Threading.CancellationToken): any;
                ContinueWhenAll<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): any;
                ContinueWhenAll<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWhenAny<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any): System.Threading.Tasks.Task;
                ContinueWhenAny<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                ContinueWhenAny<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): System.Threading.Tasks.Task;
                ContinueWhenAny<D>(tasks: System.Threading.Tasks.Task[], continuationAction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ContinueWhenAny<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any): any;
                ContinueWhenAny<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any, cancellationToken: System.Threading.CancellationToken): any;
                ContinueWhenAny<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): any;
                ContinueWhenAny<TResult, D>(tasks: System.Threading.Tasks.Task[], continuationFunction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWhenAny<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any): any;
                ContinueWhenAny<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any, cancellationToken: System.Threading.CancellationToken): any;
                ContinueWhenAny<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): any;
                ContinueWhenAny<TAntecedentResult, D, TResult>(tasks: any, continuationFunction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): any;
                ContinueWhenAny<TAntecedentResult, D>(tasks: any, continuationAction: any): System.Threading.Tasks.Task;
                ContinueWhenAny<TAntecedentResult, D>(tasks: any, continuationAction: any, cancellationToken: System.Threading.CancellationToken): System.Threading.Tasks.Task;
                ContinueWhenAny<TAntecedentResult, D>(tasks: any, continuationAction: any, continuationOptions: System.Threading.Tasks.TaskContinuationOptions): System.Threading.Tasks.Task;
                ContinueWhenAny<TAntecedentResult, D>(tasks: any, continuationAction: any, cancellationToken: System.Threading.CancellationToken, continuationOptions: System.Threading.Tasks.TaskContinuationOptions, scheduler: System.Threading.Tasks.TaskScheduler): System.Threading.Tasks.Task;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Threading {
        namespace Tasks {
            /**
            名前:TaskScheduler
            名前空間:System.Threading.Tasks
            完全限定名:System.Threading.Tasks.TaskScheduler
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Abstract, HasSecurity, BeforeFieldInit
            */
            interface TaskScheduler {
                MaximumConcurrencyLevel :number;
                Default :System.Threading.Tasks.TaskScheduler;
                Current :System.Threading.Tasks.TaskScheduler;
                Id :number;
                FromCurrentSynchronizationContext(): System.Threading.Tasks.TaskScheduler;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace CompilerServices {
            /**
            名前:TaskAwaiter
            名前空間:System.Runtime.CompilerServices
            完全限定名:System.Runtime.CompilerServices.TaskAwaiter
            このメンバを宣言するクラス:
            親クラス:System.ValueType
            属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
            */
            interface TaskAwaiter {
                IsCompleted :boolean;
                OnCompleted(continuation: System.Action): void;
                UnsafeOnCompleted(continuation: System.Action): void;
                GetResult(): void;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace CompilerServices {
            /**
            名前:ConfiguredTaskAwaitable
            名前空間:System.Runtime.CompilerServices
            完全限定名:System.Runtime.CompilerServices.ConfiguredTaskAwaitable
            このメンバを宣言するクラス:
            親クラス:System.ValueType
            属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
            */
            interface ConfiguredTaskAwaitable {
                GetAwaiter(): System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace CompilerServices {
            /**
            名前:YieldAwaitable
            名前空間:System.Runtime.CompilerServices
            完全限定名:System.Runtime.CompilerServices.YieldAwaitable
            このメンバを宣言するクラス:
            親クラス:System.ValueType
            属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
            */
            interface YieldAwaitable {
                GetAwaiter(): System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Threading {
        namespace Tasks {
            /**
            名前:TaskContinuationOptions
            名前空間:System.Threading.Tasks
            完全限定名:System.Threading.Tasks.TaskContinuationOptions
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
            */
            interface TaskContinuationOptions {
                value__ :number;
                None :System.Threading.Tasks.TaskContinuationOptions;
                PreferFairness :System.Threading.Tasks.TaskContinuationOptions;
                LongRunning :System.Threading.Tasks.TaskContinuationOptions;
                AttachedToParent :System.Threading.Tasks.TaskContinuationOptions;
                DenyChildAttach :System.Threading.Tasks.TaskContinuationOptions;
                HideScheduler :System.Threading.Tasks.TaskContinuationOptions;
                LazyCancellation :System.Threading.Tasks.TaskContinuationOptions;
                RunContinuationsAsynchronously :System.Threading.Tasks.TaskContinuationOptions;
                NotOnRanToCompletion :System.Threading.Tasks.TaskContinuationOptions;
                NotOnFaulted :System.Threading.Tasks.TaskContinuationOptions;
                NotOnCanceled :System.Threading.Tasks.TaskContinuationOptions;
                OnlyOnRanToCompletion :System.Threading.Tasks.TaskContinuationOptions;
                OnlyOnFaulted :System.Threading.Tasks.TaskContinuationOptions;
                OnlyOnCanceled :System.Threading.Tasks.TaskContinuationOptions;
                ExecuteSynchronously :System.Threading.Tasks.TaskContinuationOptions;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    /**
    名前:Exception
    名前空間:System
    完全限定名:System.Exception
    このメンバを宣言するクラス:
    親クラス:System.Object
    属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
    */
    interface Exception {
        new();
        new(message: string);
        new(message: string, innerException: System.Exception);
        Message :string;
        Data :System.Collections.IDictionary;
        InnerException :System.Exception;
        TargetSite :System.Reflection.MethodBase;
        StackTrace :string;
        HelpLink :string;
        Source :string;
        HResult :number;
        GetBaseException(): System.Exception;
        ToString(): string;
        GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext): void;
        GetType(): System.Type;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Threading {
        /**
        名前:CancellationTokenRegistration
        名前空間:System.Threading
        完全限定名:System.Threading.CancellationTokenRegistration
        このメンバを宣言するクラス:
        親クラス:System.ValueType
        属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
        */
        interface CancellationTokenRegistration {
            Dispose(): void;
            Equals(obj: any): boolean;
            Equals(other: System.Threading.CancellationTokenRegistration): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    /**
    名前:MarshalByRefObject
    名前空間:System
    完全限定名:System.MarshalByRefObject
    このメンバを宣言するクラス:
    親クラス:System.Object
    属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
    */
    interface MarshalByRefObject {
        GetLifetimeService(): any;
        InitializeLifetimeService(): any;
        CreateObjRef(requestedType: System.Type): System.Runtime.Remoting.ObjRef;
        ToString(): string;
        Equals(obj: any): boolean;
        GetHashCode(): number;
        GetType(): System.Type;
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            /**
            名前:IRemotingTypeInfo
            名前空間:System.Runtime.Remoting
            完全限定名:System.Runtime.Remoting.IRemotingTypeInfo
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IRemotingTypeInfo {
                TypeName :string;
                CanCastTo(fromType: System.Type, o: any): boolean;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            /**
            名前:IEnvoyInfo
            名前空間:System.Runtime.Remoting
            完全限定名:System.Runtime.Remoting.IEnvoyInfo
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IEnvoyInfo {
                EnvoySinks :System.Runtime.Remoting.Messaging.IMessageSink;
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            /**
            名前:IChannelInfo
            名前空間:System.Runtime.Remoting
            完全限定名:System.Runtime.Remoting.IChannelInfo
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IChannelInfo {
                ChannelData :any[];
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AccessControlSections
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AccessControlSections
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface AccessControlSections {
                value__ :number;
                None :System.Security.AccessControl.AccessControlSections;
                Audit :System.Security.AccessControl.AccessControlSections;
                Access :System.Security.AccessControl.AccessControlSections;
                Owner :System.Security.AccessControl.AccessControlSections;
                Group :System.Security.AccessControl.AccessControlSections;
                All :System.Security.AccessControl.AccessControlSections;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace Principal {
            /**
            名前:IdentityReference
            名前空間:System.Security.Principal
            完全限定名:System.Security.Principal.IdentityReference
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
            */
            interface IdentityReference {
                Value :string;
                IsValidTargetType(targetType: System.Type): boolean;
                Translate(targetType: System.Type): System.Security.Principal.IdentityReference;
                Equals(o: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:InheritanceFlags
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.InheritanceFlags
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface InheritanceFlags {
                value__ :number;
                None :System.Security.AccessControl.InheritanceFlags;
                ContainerInherit :System.Security.AccessControl.InheritanceFlags;
                ObjectInherit :System.Security.AccessControl.InheritanceFlags;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:PropagationFlags
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.PropagationFlags
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface PropagationFlags {
                value__ :number;
                None :System.Security.AccessControl.PropagationFlags;
                NoPropagateInherit :System.Security.AccessControl.PropagationFlags;
                InheritOnly :System.Security.AccessControl.PropagationFlags;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AccessControlType
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AccessControlType
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface AccessControlType {
                value__ :number;
                Allow :System.Security.AccessControl.AccessControlType;
                Deny :System.Security.AccessControl.AccessControlType;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AccessRule
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AccessRule
            このメンバを宣言するクラス:
            親クラス:System.Security.AccessControl.AuthorizationRule
            属性:AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
            */
            interface AccessRule {
                AccessControlType :System.Security.AccessControl.AccessControlType;
                IdentityReference :System.Security.Principal.IdentityReference;
                IsInherited :boolean;
                InheritanceFlags :System.Security.AccessControl.InheritanceFlags;
                PropagationFlags :System.Security.AccessControl.PropagationFlags;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AuditFlags
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AuditFlags
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface AuditFlags {
                value__ :number;
                None :System.Security.AccessControl.AuditFlags;
                Success :System.Security.AccessControl.AuditFlags;
                Failure :System.Security.AccessControl.AuditFlags;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AuditRule
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AuditRule
            このメンバを宣言するクラス:
            親クラス:System.Security.AccessControl.AuthorizationRule
            属性:AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
            */
            interface AuditRule {
                AuditFlags :System.Security.AccessControl.AuditFlags;
                IdentityReference :System.Security.Principal.IdentityReference;
                IsInherited :boolean;
                InheritanceFlags :System.Security.AccessControl.InheritanceFlags;
                PropagationFlags :System.Security.AccessControl.PropagationFlags;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:FileSystemAccessRule
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.FileSystemAccessRule
            このメンバを宣言するクラス:
            親クラス:System.Security.AccessControl.AccessRule
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface FileSystemAccessRule {
                new(identity: System.Security.Principal.IdentityReference, fileSystemRights: System.Security.AccessControl.FileSystemRights, type: System.Security.AccessControl.AccessControlType);
                new(identity: string, fileSystemRights: System.Security.AccessControl.FileSystemRights, type: System.Security.AccessControl.AccessControlType);
                new(identity: System.Security.Principal.IdentityReference, fileSystemRights: System.Security.AccessControl.FileSystemRights, inheritanceFlags: System.Security.AccessControl.InheritanceFlags, propagationFlags: System.Security.AccessControl.PropagationFlags, type: System.Security.AccessControl.AccessControlType);
                new(identity: string, fileSystemRights: System.Security.AccessControl.FileSystemRights, inheritanceFlags: System.Security.AccessControl.InheritanceFlags, propagationFlags: System.Security.AccessControl.PropagationFlags, type: System.Security.AccessControl.AccessControlType);
                FileSystemRights :System.Security.AccessControl.FileSystemRights;
                AccessControlType :System.Security.AccessControl.AccessControlType;
                IdentityReference :System.Security.Principal.IdentityReference;
                IsInherited :boolean;
                InheritanceFlags :System.Security.AccessControl.InheritanceFlags;
                PropagationFlags :System.Security.AccessControl.PropagationFlags;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:FileSystemAuditRule
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.FileSystemAuditRule
            このメンバを宣言するクラス:
            親クラス:System.Security.AccessControl.AuditRule
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface FileSystemAuditRule {
                new(identity: System.Security.Principal.IdentityReference, fileSystemRights: System.Security.AccessControl.FileSystemRights, flags: System.Security.AccessControl.AuditFlags);
                new(identity: System.Security.Principal.IdentityReference, fileSystemRights: System.Security.AccessControl.FileSystemRights, inheritanceFlags: System.Security.AccessControl.InheritanceFlags, propagationFlags: System.Security.AccessControl.PropagationFlags, flags: System.Security.AccessControl.AuditFlags);
                new(identity: string, fileSystemRights: System.Security.AccessControl.FileSystemRights, flags: System.Security.AccessControl.AuditFlags);
                new(identity: string, fileSystemRights: System.Security.AccessControl.FileSystemRights, inheritanceFlags: System.Security.AccessControl.InheritanceFlags, propagationFlags: System.Security.AccessControl.PropagationFlags, flags: System.Security.AccessControl.AuditFlags);
                FileSystemRights :System.Security.AccessControl.FileSystemRights;
                AuditFlags :System.Security.AccessControl.AuditFlags;
                IdentityReference :System.Security.Principal.IdentityReference;
                IsInherited :boolean;
                InheritanceFlags :System.Security.AccessControl.InheritanceFlags;
                PropagationFlags :System.Security.AccessControl.PropagationFlags;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AuthorizationRuleCollection
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AuthorizationRuleCollection
            このメンバを宣言するクラス:
            親クラス:System.Collections.ReadOnlyCollectionBase
            属性:AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
            */
            interface AuthorizationRuleCollection {
                new();
                Item :System.Security.AccessControl.AuthorizationRule;
                Count :number;
                AddRule(rule: System.Security.AccessControl.AuthorizationRule): void;
                CopyTo(rules: System.Security.AccessControl.AuthorizationRule[], index: number): void;
                [index: number]: System.Security.AccessControl.AuthorizationRule;
                GetEnumerator(): System.Collections.IEnumerator;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AccessControlModification
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AccessControlModification
            このメンバを宣言するクラス:
            親クラス:System.Enum
            属性:AutoLayout, AnsiClass, Class, Public, Sealed
            */
            interface AccessControlModification {
                value__ :number;
                Add :System.Security.AccessControl.AccessControlModification;
                Set :System.Security.AccessControl.AccessControlModification;
                Reset :System.Security.AccessControl.AccessControlModification;
                Remove :System.Security.AccessControl.AccessControlModification;
                RemoveAll :System.Security.AccessControl.AccessControlModification;
                RemoveSpecific :System.Security.AccessControl.AccessControlModification;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                ToString(): string;
                ToString(format: string, provider: System.IFormatProvider): string;
                CompareTo(target: any): number;
                ToString(format: string): string;
                ToString(provider: System.IFormatProvider): string;
                HasFlag(flag: System.Enum): boolean;
                GetTypeCode(): System.TypeCode;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IHashCodeProvider
        名前空間:System.Collections
        完全限定名:System.Collections.IHashCodeProvider
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IHashCodeProvider {
            GetHashCode(obj: any): number;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IEqualityComparer
        名前空間:System.Collections
        完全限定名:System.Collections.IEqualityComparer
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IEqualityComparer {
            Equals(x: any, y: any): boolean;
            GetHashCode(obj: any): number;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IDictionary
        名前空間:System.Collections
        完全限定名:System.Collections.IDictionary
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IDictionary {
            Item :any;
            Keys :System.Collections.ICollection;
            Values :System.Collections.ICollection;
            IsReadOnly :boolean;
            IsFixedSize :boolean;
            [key: any]: System.Object;
            Contains(key: any): boolean;
            Add(key: any, value: any): void;
            Clear(): void;
            GetEnumerator(): System.Collections.IDictionaryEnumerator;
            Remove(key: any): void;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:ICollection
        名前空間:System.Collections
        完全限定名:System.Collections.ICollection
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface ICollection {
            Count :number;
            SyncRoot :any;
            IsSynchronized :boolean;
            CopyTo(array: System.Array, index: number): void;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IDictionaryEnumerator
        名前空間:System.Collections
        完全限定名:System.Collections.IDictionaryEnumerator
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IDictionaryEnumerator {
            Key :any;
            Value :any;
            Entry :System.Collections.DictionaryEntry;
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:IList
        名前空間:System.Collections
        完全限定名:System.Collections.IList
        このメンバを宣言するクラス:
        親クラス:
        属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
        */
        interface IList {
            Item :any;
            IsReadOnly :boolean;
            IsFixedSize :boolean;
            [index: number]: System.Object;
            Add(value: any): number;
            Contains(value: any): boolean;
            Clear(): void;
            IndexOf(value: any): number;
            Insert(index: number, value: any): void;
            Remove(value: any): void;
            RemoveAt(index: number): void;
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            namespace Messaging {
                /**
                名前:IMessageSink
                名前空間:System.Runtime.Remoting.Messaging
                完全限定名:System.Runtime.Remoting.Messaging.IMessageSink
                このメンバを宣言するクラス:
                親クラス:
                属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
                */
                interface IMessageSink {
                    NextSink :System.Runtime.Remoting.Messaging.IMessageSink;
                    SyncProcessMessage(msg: System.Runtime.Remoting.Messaging.IMessage): System.Runtime.Remoting.Messaging.IMessage;
                    AsyncProcessMessage(msg: System.Runtime.Remoting.Messaging.IMessage, replySink: System.Runtime.Remoting.Messaging.IMessageSink): System.Runtime.Remoting.Messaging.IMessageCtrl;
                }
            }
        }
    }
}
declare namespace System {
    namespace Security {
        namespace AccessControl {
            /**
            名前:AuthorizationRule
            名前空間:System.Security.AccessControl
            完全限定名:System.Security.AccessControl.AuthorizationRule
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
            */
            interface AuthorizationRule {
                IdentityReference :System.Security.Principal.IdentityReference;
                IsInherited :boolean;
                InheritanceFlags :System.Security.AccessControl.InheritanceFlags;
                PropagationFlags :System.Security.AccessControl.PropagationFlags;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        /**
        名前:DictionaryEntry
        名前空間:System.Collections
        完全限定名:System.Collections.DictionaryEntry
        このメンバを宣言するクラス:
        親クラス:System.ValueType
        属性:AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
        */
        interface DictionaryEntry {
            new(key: any, value: any);
            Key :any;
            Value :any;
            Equals(obj: any): boolean;
            GetHashCode(): number;
            ToString(): string;
            GetType(): System.Type;
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            namespace Messaging {
                /**
                名前:IMessage
                名前空間:System.Runtime.Remoting.Messaging
                完全限定名:System.Runtime.Remoting.Messaging.IMessage
                このメンバを宣言するクラス:
                親クラス:
                属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
                */
                interface IMessage {
                    Properties :System.Collections.IDictionary;
                }
            }
        }
    }
}
declare namespace System {
    namespace Runtime {
        namespace Remoting {
            namespace Messaging {
                /**
                名前:IMessageCtrl
                名前空間:System.Runtime.Remoting.Messaging
                完全限定名:System.Runtime.Remoting.Messaging.IMessageCtrl
                このメンバを宣言するクラス:
                親クラス:
                属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
                */
                interface IMessageCtrl {
                    Cancel(msToCancel: number): void;
                }
            }
        }
    }
}
