declare namespace System {
    namespace Collections {
        namespace Generic {
            /**
            名前:List`1
            名前空間:System.Collections.Generic
            完全限定名:System.Collections.Generic.List`1
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
            */
            interface List<T> {
                new();
                new(capacity: number);
                new(collection: System.Collections.Generic.IEnumerable<T>);
                Capacity :number;
                readonly Count :number;
                Item :T;
                [index: number]: T;
                Add(item: T): void;
                AddRange(collection: System.Collections.Generic.IEnumerable<T>): void;
                BinarySearch(index: number, count: number, item: T, comparer: System.Collections.Generic.IComparer<T>): number;
                Clear(): void;
                Contains(item: T): boolean;
                ConvertAll<TOutput>(converter: any): any;
                CopyTo(index: number, array: T[], arrayIndex: number, count: number): void;
                ForEach(action: System.Action<T>): void;
                GetEnumerator(): System.Collections.Generic.Enumerator<T>;
                *[Symbol.iterator](): IterableIterator<any>;
                IndexOf(item: T): number;
                Insert(index: number, item: T): void;
                InsertRange(index: number, collection: System.Collections.Generic.IEnumerable<T>): void;
                Remove(item: T): boolean;
                RemoveAll(match: System.Predicate<T>): number;
                RemoveAt(index: number): void;
                RemoveRange(index: number, count: number): void;
                Reverse(index: number, count: number): void;
                Sort(): void;
                Sort(comparer: System.Collections.Generic.IComparer<T>): void;
                Sort(index: number, count: number, comparer: System.Collections.Generic.IComparer<T>): void;
                Sort(comparison: System.Comparison<T>): void;
                ToArray(): T[];
                TrimExcess(): void;
                AsReadOnly(): System.Collections.ObjectModel.ReadOnlyCollection<T>;
                BinarySearch(item: T): number;
                BinarySearch(item: T, comparer: System.Collections.Generic.IComparer<T>): number;
                CopyTo(array: T[]): void;
                CopyTo(array: T[], arrayIndex: number): void;
                Exists(match: System.Predicate<T>): boolean;
                Find(match: System.Predicate<T>): T;
                FindAll(match: System.Predicate<T>): System.Collections.Generic.List<T>;
                FindIndex(match: System.Predicate<T>): number;
                FindIndex(startIndex: number, match: System.Predicate<T>): number;
                FindIndex(startIndex: number, count: number, match: System.Predicate<T>): number;
                FindLast(match: System.Predicate<T>): T;
                FindLastIndex(match: System.Predicate<T>): number;
                FindLastIndex(startIndex: number, match: System.Predicate<T>): number;
                FindLastIndex(startIndex: number, count: number, match: System.Predicate<T>): number;
                GetRange(index: number, count: number): System.Collections.Generic.List<T>;
                IndexOf(item: T, index: number): number;
                IndexOf(item: T, index: number, count: number): number;
                LastIndexOf(item: T): number;
                LastIndexOf(item: T, index: number): number;
                LastIndexOf(item: T, index: number, count: number): number;
                Reverse(): void;
                TrueForAll(match: System.Predicate<T>): boolean;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): System.Type;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        namespace Generic {
            /**
            名前:IEnumerable`1
            名前空間:System.Collections.Generic
            完全限定名:System.Collections.Generic.IEnumerable`1
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IEnumerable<T> {
                GetEnumerator(): any;
                *[Symbol.iterator](): IterableIterator<any>;
            }
        }
    }
}
declare namespace System {
    namespace Collections {
        namespace Generic {
            /**
            名前:IComparer`1
            名前空間:System.Collections.Generic
            完全限定名:System.Collections.Generic.IComparer`1
            このメンバを宣言するクラス:
            親クラス:
            属性:AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
            */
            interface IComparer<T> {
                Compare(x: any, y: any): number;
            }
        }
    }
}
declare namespace System {
    /**
    名前:Converter`2
    名前空間:System
    完全限定名:System.Converter`2
    このメンバを宣言するクラス:
    親クラス:System.MulticastDelegate
    属性:AutoLayout, AnsiClass, Class, Public, Sealed
    */
    interface Converter<TInput, TOutput> {
        new(object: any, method: any);
        readonly Method :any;
        readonly Target :any;
        Invoke(input: any): any;
        connect(func: (input: any) => any) :void
        disconnect(func: (input: any) => any) :void
        BeginInvoke(input: any, callback: any, object: any): any;
        EndInvoke(result: any): any;
        GetObjectData(info: any, context: any): void;
        Equals(obj: any): boolean;
        GetInvocationList(): any;
        GetHashCode(): number;
        DynamicInvoke(...args: any[]): any;
        Clone(): any;
        ToString(): string;
        GetType(): any;
    }
}
declare namespace System {
    /**
    名前:Action`1
    名前空間:System
    完全限定名:System.Action`1
    このメンバを宣言するクラス:
    親クラス:System.MulticastDelegate
    属性:AutoLayout, AnsiClass, Class, Public, Sealed
    */
    interface Action<T> {
        new(object: any, method: any);
        readonly Method :any;
        readonly Target :any;
        Invoke(obj: any): void;
        connect(func: (obj: any) => void) :void
        disconnect(func: (obj: any) => void) :void
        BeginInvoke(obj: any, callback: any, object: any): any;
        EndInvoke(result: any): void;
        GetObjectData(info: any, context: any): void;
        Equals(obj: any): boolean;
        GetInvocationList(): any;
        GetHashCode(): number;
        DynamicInvoke(...args: any[]): any;
        Clone(): any;
        ToString(): string;
        GetType(): any;
    }
}
declare namespace System {
    /**
    名前:Predicate`1
    名前空間:System
    完全限定名:System.Predicate`1
    このメンバを宣言するクラス:
    親クラス:System.MulticastDelegate
    属性:AutoLayout, AnsiClass, Class, Public, Sealed
    */
    interface Predicate<T> {
        new(object: any, method: any);
        readonly Method :any;
        readonly Target :any;
        Invoke(obj: any): boolean;
        connect(func: (obj: any) => boolean) :void
        disconnect(func: (obj: any) => boolean) :void
        BeginInvoke(obj: any, callback: any, object: any): any;
        EndInvoke(result: any): boolean;
        GetObjectData(info: any, context: any): void;
        Equals(obj: any): boolean;
        GetInvocationList(): any;
        GetHashCode(): number;
        DynamicInvoke(...args: any[]): any;
        Clone(): any;
        ToString(): string;
        GetType(): any;
    }
}
declare namespace System {
    /**
    名前:Comparison`1
    名前空間:System
    完全限定名:System.Comparison`1
    このメンバを宣言するクラス:
    親クラス:System.MulticastDelegate
    属性:AutoLayout, AnsiClass, Class, Public, Sealed
    */
    interface Comparison<T> {
        new(object: any, method: any);
        readonly Method :any;
        readonly Target :any;
        Invoke(x: any, y: any): number;
        connect(func: (x: any, y: any) => number) :void
        disconnect(func: (x: any, y: any) => number) :void
        BeginInvoke(x: any, y: any, callback: any, object: any): any;
        EndInvoke(result: any): number;
        GetObjectData(info: any, context: any): void;
        Equals(obj: any): boolean;
        GetInvocationList(): any;
        GetHashCode(): number;
        DynamicInvoke(...args: any[]): any;
        Clone(): any;
        ToString(): string;
        GetType(): any;
    }
}
declare namespace System {
    namespace Collections {
        namespace ObjectModel {
            /**
            名前:ReadOnlyCollection`1
            名前空間:System.Collections.ObjectModel
            完全限定名:System.Collections.ObjectModel.ReadOnlyCollection`1
            このメンバを宣言するクラス:
            親クラス:System.Object
            属性:AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
            */
            interface ReadOnlyCollection<T> {
                new(list: any);
                readonly Count :number;
                readonly Item :any;
                [index: number]: any;
                GetEnumerator(): any;
                *[Symbol.iterator](): IterableIterator<any>;
                Contains(value: any): boolean;
                CopyTo(array: any, index: number): void;
                IndexOf(value: any): number;
                ToString(): string;
                Equals(obj: any): boolean;
                GetHashCode(): number;
                GetType(): any;
            }
        }
    }
}
declare namespace System {
    /**
    名前:Type
    名前空間:System
    完全限定名:System.Type
    このメンバを宣言するクラス:
    親クラス:System.Reflection.MemberInfo
    属性:AutoLayout, AnsiClass, Class, Public, Abstract, Serializable, BeforeFieldInit
    */
    interface Type {
        readonly FilterAttribute :any;
        readonly FilterName :any;
        readonly FilterNameIgnoreCase :any;
        readonly Missing :any;
        readonly Delimiter :any;
        readonly EmptyTypes :any;
        readonly MemberType :any;
        readonly DeclaringType :any;
        readonly DeclaringMethod :any;
        readonly ReflectedType :any;
        readonly StructLayoutAttribute :any;
        readonly GUID :any;
        readonly DefaultBinder :any;
        readonly Module :any;
        readonly Assembly :any;
        readonly TypeHandle :any;
        readonly FullName :string;
        readonly Namespace :string;
        readonly AssemblyQualifiedName :string;
        readonly BaseType :any;
        readonly TypeInitializer :any;
        readonly IsNested :boolean;
        readonly Attributes :any;
        readonly GenericParameterAttributes :any;
        readonly IsVisible :boolean;
        readonly IsNotPublic :boolean;
        readonly IsPublic :boolean;
        readonly IsNestedPublic :boolean;
        readonly IsNestedPrivate :boolean;
        readonly IsNestedFamily :boolean;
        readonly IsNestedAssembly :boolean;
        readonly IsNestedFamANDAssem :boolean;
        readonly IsNestedFamORAssem :boolean;
        readonly IsAutoLayout :boolean;
        readonly IsLayoutSequential :boolean;
        readonly IsExplicitLayout :boolean;
        readonly IsClass :boolean;
        readonly IsInterface :boolean;
        readonly IsValueType :boolean;
        readonly IsAbstract :boolean;
        readonly IsSealed :boolean;
        readonly IsEnum :boolean;
        readonly IsSpecialName :boolean;
        readonly IsImport :boolean;
        readonly IsSerializable :boolean;
        readonly IsAnsiClass :boolean;
        readonly IsUnicodeClass :boolean;
        readonly IsAutoClass :boolean;
        readonly IsArray :boolean;
        readonly IsGenericType :boolean;
        readonly IsGenericTypeDefinition :boolean;
        readonly IsConstructedGenericType :boolean;
        readonly IsGenericParameter :boolean;
        readonly GenericParameterPosition :number;
        readonly ContainsGenericParameters :boolean;
        readonly IsByRef :boolean;
        readonly IsPointer :boolean;
        readonly IsPrimitive :boolean;
        readonly IsCOMObject :boolean;
        readonly HasElementType :boolean;
        readonly IsContextful :boolean;
        readonly IsMarshalByRef :boolean;
        readonly GenericTypeArguments :any;
        readonly IsSecurityCritical :boolean;
        readonly IsSecuritySafeCritical :boolean;
        readonly IsSecurityTransparent :boolean;
        readonly UnderlyingSystemType :any;
        readonly Name :string;
        readonly CustomAttributes :any;
        readonly MetadataToken :number;
        GetType(typeName: string, throwOnError: boolean, ignoreCase: boolean): any;
        GetType(typeName: string, throwOnError: boolean): any;
        GetType(typeName: string): any;
        GetType<D>(typeName: string, assemblyResolver: any, typeResolver: any): any;
        GetType<D>(typeName: string, assemblyResolver: any, typeResolver: any, throwOnError: boolean): any;
        GetType<D>(typeName: string, assemblyResolver: any, typeResolver: any, throwOnError: boolean, ignoreCase: boolean): any;
        ReflectionOnlyGetType(typeName: string, throwIfNotFound: boolean, ignoreCase: boolean): any;
        MakePointerType(): any;
        MakeByRefType(): any;
        MakeArrayType(): any;
        MakeArrayType(rank: number): any;
        GetTypeFromProgID(progID: string): any;
        GetTypeFromProgID(progID: string, throwOnError: boolean): any;
        GetTypeFromProgID(progID: string, server: string): any;
        GetTypeFromProgID(progID: string, server: string, throwOnError: boolean): any;
        GetTypeFromCLSID(clsid: any): any;
        GetTypeFromCLSID(clsid: any, throwOnError: boolean): any;
        GetTypeFromCLSID(clsid: any, server: string): any;
        GetTypeFromCLSID(clsid: any, server: string, throwOnError: boolean): any;
        GetTypeCode(type: any): any;
        InvokeMember(name: string, invokeAttr: any, binder: any, target: any, args: any, modifiers: any, culture: any, namedParameters: any): any;
        InvokeMember(name: string, invokeAttr: any, binder: any, target: any, args: any, culture: any): any;
        InvokeMember(name: string, invokeAttr: any, binder: any, target: any, args: any): any;
        GetTypeHandle(o: any): any;
        GetTypeFromHandle(handle: any): any;
        GetArrayRank(): number;
        GetConstructor(bindingAttr: any, binder: any, callConvention: any, types: any, modifiers: any): any;
        GetConstructor(bindingAttr: any, binder: any, types: any, modifiers: any): any;
        GetConstructor(types: any): any;
        GetConstructors(): any;
        GetConstructors(bindingAttr: any): any;
        GetMethod(name: string, bindingAttr: any, binder: any, callConvention: any, types: any, modifiers: any): any;
        GetMethod(name: string, bindingAttr: any, binder: any, types: any, modifiers: any): any;
        GetMethod(name: string, types: any, modifiers: any): any;
        GetMethod(name: string, types: any): any;
        GetMethod(name: string, bindingAttr: any): any;
        GetMethod(name: string): any;
        GetMethods(): any;
        GetMethods(bindingAttr: any): any;
        GetField(name: string, bindingAttr: any): any;
        GetField(name: string): any;
        GetFields(): any;
        GetFields(bindingAttr: any): any;
        GetInterface(name: string): any;
        GetInterface(name: string, ignoreCase: boolean): any;
        GetInterfaces(): any;
        FindInterfaces(filter: any, filterCriteria: any): any;
        GetEvent(name: string): any;
        GetEvent(name: string, bindingAttr: any): any;
        GetEvents(): any;
        GetEvents(bindingAttr: any): any;
        GetProperty(name: string, bindingAttr: any, binder: any, returnType: any, types: any, modifiers: any): any;
        GetProperty(name: string, returnType: any, types: any, modifiers: any): any;
        GetProperty(name: string, bindingAttr: any): any;
        GetProperty(name: string, returnType: any, types: any): any;
        GetProperty(name: string, types: any): any;
        GetProperty(name: string, returnType: any): any;
        GetProperty(name: string): any;
        GetProperties(bindingAttr: any): any;
        GetProperties(): any;
        GetNestedTypes(): any;
        GetNestedTypes(bindingAttr: any): any;
        GetNestedType(name: string): any;
        GetNestedType(name: string, bindingAttr: any): any;
        GetMember(name: string): any;
        GetMember(name: string, bindingAttr: any): any;
        GetMember(name: string, type: any, bindingAttr: any): any;
        GetMembers(): any;
        GetMembers(bindingAttr: any): any;
        GetDefaultMembers(): any;
        FindMembers(memberType: any, bindingAttr: any, filter: any, filterCriteria: any): any;
        GetGenericParameterConstraints(): any;
        MakeGenericType(...typeArguments: any[]): any;
        GetElementType(): any;
        GetGenericArguments(): any;
        GetGenericTypeDefinition(): any;
        GetEnumNames(): any;
        GetEnumValues(): any;
        GetEnumUnderlyingType(): any;
        IsEnumDefined(value: any): boolean;
        GetEnumName(value: any): string;
        IsSubclassOf(c: any): boolean;
        IsInstanceOfType(o: any): boolean;
        IsAssignableFrom(c: any): boolean;
        IsEquivalentTo(other: any): boolean;
        ToString(): string;
        GetTypeArray(args: any): any;
        Equals(o: any): boolean;
        GetHashCode(): number;
        GetInterfaceMap(interfaceType: any): any;
        GetType(): any;
        GetCustomAttributes(inherit: boolean): any;
        GetCustomAttributes(attributeType: any, inherit: boolean): any;
        IsDefined(attributeType: any, inherit: boolean): boolean;
        GetCustomAttributesData(): any;
    }
}
